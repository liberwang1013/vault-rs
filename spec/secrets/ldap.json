{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/config": {
      "description": "Configure the LDAP secrets engine plugin.",
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/creds/{name}": {
      "description": "Request LDAP credentials for a dynamic role. These credentials are created within the LDAP system when querying this endpoint.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the dynamic role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/library": {
      "description": "List the name of each set of service accounts currently stored.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/library/manage/{name}/check-in": {
      "description": "Force checking service accounts in to the library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Check service accounts in to the library.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryManageCheckInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/library/{name}": {
      "description": "Build a library of service accounts that can be checked out.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Read a library set.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Update a library set.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a library set.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/library/{name}/check-in": {
      "description": "Check service accounts in to the library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Check service accounts in to the library.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryCheckInRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/library/{name}/check-out": {
      "description": "Check a service account out from the library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Check a service account out from the library.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryCheckOutRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/library/{name}/status": {
      "description": "Check the status of the service accounts in a library.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Check the status of the service accounts in a library set.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/role": {
      "description": "List all the dynamic roles Vault is currently managing in LDAP.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/role/{name}": {
      "description": "Manage the static roles that can be created with this backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role (lowercase)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/rotate-role/{name}": {
      "description": "Request to rotate the credentials for a static user account.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the static role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rotate-root": {
      "description": "Request to rotate the root credentials Vault uses for the LDAP administrator account.",
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-cred/{name}": {
      "description": "Request LDAP credentials for a certain static role. These credentials are rotated periodically.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the static role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-role": {
      "description": "This path lists all the static roles Vault is currently managing within the LDAP system.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-role/{name}": {
      "description": "Manage the static roles that can be created with this backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigRequest": {
        "type": "object",
        "properties": {
          "anonymous_group_search": {
            "type": "boolean",
            "description": "Use anonymous binds when performing LDAP group searches (if true the initial credentials will still be used for the initial connection test).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Anonymous group search"
            }
          },
          "binddn": {
            "type": "string",
            "description": "LDAP DN for searching for the user DN (optional)",
            "x-vault-displayAttrs": {
              "name": "Name of Object to bind (binddn)"
            }
          },
          "bindpass": {
            "type": "string",
            "description": "LDAP password for searching for the user DN (optional)",
            "x-vault-displayAttrs": {
              "sensitive": true
            }
          },
          "case_sensitive_names": {
            "type": "boolean",
            "description": "If true, case sensitivity will be used when comparing usernames and groups for matching policies."
          },
          "certificate": {
            "type": "string",
            "description": "CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "CA certificate",
              "editType": "file"
            }
          },
          "client_tls_cert": {
            "type": "string",
            "description": "Client certificate to provide to the LDAP server, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "Client certificate",
              "editType": "file"
            }
          },
          "client_tls_key": {
            "type": "string",
            "description": "Client certificate key to provide to the LDAP server, must be x509 PEM encoded (optional)",
            "x-vault-displayAttrs": {
              "name": "Client key",
              "editType": "file"
            }
          },
          "deny_null_bind": {
            "type": "boolean",
            "description": "Denies an unauthenticated LDAP bind request if the user's password is empty; defaults to true",
            "default": true
          },
          "discoverdn": {
            "type": "boolean",
            "description": "Use anonymous bind to discover the bind DN of a user (optional)",
            "x-vault-displayAttrs": {
              "name": "Discover DN"
            }
          },
          "groupattr": {
            "type": "string",
            "description": "LDAP attribute to follow on objects returned by <groupfilter> in order to enumerate user group membership. Examples: \"cn\" or \"memberOf\", etc. Default: cn",
            "default": "cn",
            "x-vault-displayAttrs": {
              "name": "Group Attribute",
              "value": "cn"
            }
          },
          "groupdn": {
            "type": "string",
            "description": "LDAP search base to use for group membership search (eg: ou=Groups,dc=example,dc=org)",
            "x-vault-displayAttrs": {
              "name": "Group DN"
            }
          },
          "groupfilter": {
            "type": "string",
            "description": "Go template for querying group membership of user (optional) The template can access the following context variables: UserDN, Username Example: (&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}})) Default: (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
            "default": "(|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))",
            "x-vault-displayAttrs": {
              "name": "Group Filter"
            }
          },
          "insecure_tls": {
            "type": "boolean",
            "description": "Skip LDAP server SSL Certificate verification - VERY insecure (optional)",
            "x-vault-displayAttrs": {
              "name": "Insecure TLS"
            }
          },
          "length": {
            "type": "integer",
            "description": "The desired length of passwords that Vault generates.",
            "deprecated": true
          },
          "max_ttl": {
            "type": "integer",
            "description": "The maximum password time-to-live.",
            "format": "seconds"
          },
          "password_policy": {
            "type": "string",
            "description": "Password policy to use to generate passwords"
          },
          "request_timeout": {
            "type": "integer",
            "description": "Timeout, in seconds, for the connection when making requests against the server before returning back an error.",
            "format": "seconds",
            "default": "90s"
          },
          "schema": {
            "type": "string",
            "description": "The desired LDAP schema used when modifying user account passwords.",
            "default": "openldap"
          },
          "starttls": {
            "type": "boolean",
            "description": "Issue a StartTLS command after establishing unencrypted connection (optional)",
            "x-vault-displayAttrs": {
              "name": "Issue StartTLS"
            }
          },
          "tls_max_version": {
            "type": "string",
            "description": "Maximum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
            "enum": [
              "tls10",
              "tls11",
              "tls12",
              "tls13"
            ],
            "default": "tls12",
            "x-vault-displayAttrs": {
              "name": "Maximum TLS Version"
            }
          },
          "tls_min_version": {
            "type": "string",
            "description": "Minimum TLS version to use. Accepted values are 'tls10', 'tls11', 'tls12' or 'tls13'. Defaults to 'tls12'",
            "enum": [
              "tls10",
              "tls11",
              "tls12",
              "tls13"
            ],
            "default": "tls12",
            "x-vault-displayAttrs": {
              "name": "Minimum TLS Version"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The default password time-to-live.",
            "format": "seconds"
          },
          "upndomain": {
            "type": "string",
            "description": "Enables userPrincipalDomain login with [username]@UPNDomain (optional)",
            "x-vault-displayAttrs": {
              "name": "User Principal (UPN) Domain"
            }
          },
          "url": {
            "type": "string",
            "description": "LDAP URL to connect to (default: ldap://127.0.0.1). Multiple URLs can be specified by concatenating them with commas; they will be tried in-order.",
            "default": "ldap://127.0.0.1",
            "x-vault-displayAttrs": {
              "name": "URL"
            }
          },
          "use_pre111_group_cn_behavior": {
            "type": "boolean",
            "description": "In Vault 1.1.1 a fix for handling group CN values of different cases unfortunately introduced a regression that could cause previously defined groups to not be found due to a change in the resulting name. If set true, the pre-1.1.1 behavior for matching group CNs will be used. This is only needed in some upgrade scenarios for backwards compatibility. It is enabled by default if the config is upgraded but disabled by default on new configurations."
          },
          "use_token_groups": {
            "type": "boolean",
            "description": "If true, use the Active Directory tokenGroups constructed attribute of the user to find the group memberships. This will find all security groups including nested ones.",
            "default": false
          },
          "userattr": {
            "type": "string",
            "description": "Attribute used for users (default: cn)",
            "default": "cn",
            "x-vault-displayAttrs": {
              "name": "User Attribute",
              "value": "cn"
            }
          },
          "userdn": {
            "type": "string",
            "description": "LDAP domain to use for users (eg: ou=People,dc=example,dc=org)",
            "x-vault-displayAttrs": {
              "name": "User DN"
            }
          },
          "userfilter": {
            "type": "string",
            "description": "Go template for LDAP user search filer (optional) The template can access the following context variables: UserAttr, Username Default: ({{.UserAttr}}={{.Username}})",
            "default": "({{.UserAttr}}={{.Username}})",
            "x-vault-displayAttrs": {
              "name": "User Search Filter"
            }
          },
          "username_as_alias": {
            "type": "boolean",
            "description": "If true, sets the alias name to the username",
            "default": false
          }
        }
      },
      "LibraryCheckInRequest": {
        "type": "object",
        "properties": {
          "service_account_names": {
            "type": "array",
            "description": "The username/logon name for the service accounts to check in.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LibraryCheckOutRequest": {
        "type": "object",
        "properties": {
          "ttl": {
            "type": "integer",
            "description": "The length of time before the check-out will expire, in seconds.",
            "format": "seconds"
          }
        }
      },
      "LibraryManageCheckInRequest": {
        "type": "object",
        "properties": {
          "service_account_names": {
            "type": "array",
            "description": "The username/logon name for the service accounts to check in.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LibraryRequest": {
        "type": "object",
        "properties": {
          "disable_check_in_enforcement": {
            "type": "boolean",
            "description": "Disable the default behavior of requiring that check-ins are performed by the entity that checked them out.",
            "default": false
          },
          "max_ttl": {
            "type": "integer",
            "description": "In seconds, the max amount of time a check-out's renewals should last. Defaults to 24 hours.",
            "format": "seconds",
            "default": 86400
          },
          "service_account_names": {
            "type": "array",
            "description": "The username/logon name for the service accounts with which this set will be associated.",
            "items": {
              "type": "string"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "In seconds, the amount of time a check-out should last. Defaults to 24 hours.",
            "format": "seconds",
            "default": 86400
          }
        }
      },
      "RoleRequest": {
        "type": "object",
        "properties": {
          "creation_ldif": {
            "type": "string",
            "description": "LDIF string used to create new entities within the LDAP system. This LDIF can be templated."
          },
          "default_ttl": {
            "type": "integer",
            "description": "Default TTL for dynamic credentials",
            "format": "seconds"
          },
          "deletion_ldif": {
            "type": "string",
            "description": "LDIF string used to delete entities created within the LDAP system. This LDIF can be templated."
          },
          "max_ttl": {
            "type": "integer",
            "description": "Max TTL a dynamic credential can be extended to",
            "format": "seconds"
          },
          "rollback_ldif": {
            "type": "string",
            "description": "LDIF string used to rollback changes in the event of a failure to create credentials. This LDIF can be templated."
          },
          "username_template": {
            "type": "string",
            "description": "The template used to create a username"
          }
        },
        "required": [
          "creation_ldif",
          "deletion_ldif"
        ]
      },
      "StaticRoleRequest": {
        "type": "object",
        "properties": {
          "dn": {
            "type": "string",
            "description": "The distinguished name of the entry to manage."
          },
          "rotation_period": {
            "type": "integer",
            "description": "Period for automatic credential rotation of the given entry.",
            "format": "seconds"
          },
          "username": {
            "type": "string",
            "description": "The username/logon name for the entry with which this role will be associated."
          }
        }
      }
    }
  }
}
