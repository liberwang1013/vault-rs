{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/^.*$": {},
    "/config": {
      "description": "Configures settings for the KV store",
      "get": {
        "summary": "Read the backend level settings.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Configure backend level settings that are applied to every key in the key-value store.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/data/{path}": {
      "description": "Write, Patch, Read, and Delete data in the Key-Value Store.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/delete/{path}": {
      "description": "Marks one or more versions as deleted in the KV store.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/destroy/{path}": {
      "description": "Permanently removes one or more versions in the KV store",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DestroyRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/metadata/{path}": {
      "description": "Configures settings for the KV store",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Return a list if `true`",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/subkeys/{path}": {
      "description": "Read the structure of a secret entry from the Key-Value store with the values removed.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubkeysResponse"
                }
              }
            }
          }
        }
      }
    },
    "/undelete/{path}": {
      "description": "Undeletes one or more versions from the KV store.",
      "parameters": [
        {
          "name": "path",
          "description": "Location of the secret.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndeleteRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigRequest": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "If true, the backend will require the cas parameter to be set for each write"
          },
          "delete_version_after": {
            "type": "integer",
            "description": "If set, the length of time before a version is deleted. A negative duration disables the use of delete_version_after on all keys. A zero duration clears the current setting. Accepts a Go duration format string.",
            "format": "seconds"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep for each key. Defaults to 10"
          }
        }
      },
      "ConfigResponse": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "If true, the backend will require the cas parameter to be set for each write"
          },
          "delete_version_after": {
            "type": "integer",
            "description": "The length of time before a version is deleted.",
            "format": "seconds"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep for each key."
          }
        }
      },
      "DataRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "The contents of the data map will be stored and returned on read.",
            "format": "map"
          },
          "options": {
            "type": "object",
            "description": "Options for writing a KV entry. Set the \"cas\" value to use a Check-And-Set operation. If not set the write will be allowed. If set to 0 a write will only be allowed if the key doesn’t exist. If the index is non-zero the write will only be allowed if the key’s current version matches the version specified in the cas parameter.",
            "format": "map"
          },
          "version": {
            "type": "integer",
            "description": "If provided during a read, the value at the version number will be returned"
          }
        }
      },
      "DataResponse": {
        "type": "object",
        "properties": {
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "custom_metadata": {
            "type": "object",
            "format": "map"
          },
          "deletion_time": {
            "type": "string"
          },
          "destroyed": {
            "type": "boolean"
          },
          "version": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeleteRequest": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "The versions to be archived. The versioned data will not be deleted, but it will no longer be returned in normal get requests.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "DestroyRequest": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "The versions to destroy. Their data will be permanently deleted.",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MetadataRequest": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean",
            "description": "If true the key will require the cas parameter to be set on all write requests. If false, the backend’s configuration will be used."
          },
          "custom_metadata": {
            "type": "object",
            "description": "User-provided key-value pairs that are used to describe arbitrary and version-agnostic information about a secret.",
            "format": "map"
          },
          "delete_version_after": {
            "type": "integer",
            "description": "The length of time before a version is deleted. If not set, the backend's configured delete_version_after is used. Cannot be greater than the backend's delete_version_after. A zero duration clears the current setting. A negative duration will cause an error.",
            "format": "seconds"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep. If not set, the backend’s configured max version is used."
          }
        }
      },
      "MetadataResponse": {
        "type": "object",
        "properties": {
          "cas_required": {
            "type": "boolean"
          },
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "current_version": {
            "type": "integer",
            "format": "int64"
          },
          "custom_metadata": {
            "type": "object",
            "description": "User-provided key-value pairs that are used to describe arbitrary and version-agnostic information about a secret.",
            "format": "map"
          },
          "delete_version_after": {
            "type": "integer",
            "description": "The length of time before a version is deleted.",
            "format": "seconds"
          },
          "max_versions": {
            "type": "integer",
            "description": "The number of versions to keep",
            "format": "int64"
          },
          "oldest_version": {
            "type": "integer",
            "format": "int64"
          },
          "updated_time": {
            "type": "string",
            "format": "date-time"
          },
          "versions": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "SubkeysResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "format": "map"
          },
          "subkeys": {
            "type": "object",
            "format": "map"
          }
        }
      },
      "UndeleteRequest": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "The versions to unarchive. The versions will be restored and their data will be returned on normal get requests.",
            "items": {
              "type": "integer"
            }
          }
        }
      }
    }
  }
}
