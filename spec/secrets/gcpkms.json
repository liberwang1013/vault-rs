{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/config": {
      "description": "Configure the GCP KMS secrets engine",
      "x-vault-createSupported": true,
      "get": {
        "summary": "Configure the GCP KMS secrets engine",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configure the GCP KMS secrets engine",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Configure the GCP KMS secrets engine",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/decrypt/{key}": {
      "description": "Decrypt a ciphertext value using a named key",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key in Vault to use for decryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Decrypt a ciphertext value using a named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/encrypt/{key}": {
      "description": "Encrypt a plaintext value using a named key",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key in Vault to use for encryption. This key must already exist in Vault and must map back to a Google Cloud KMS key.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Encrypt a plaintext value using a named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys": {
      "description": "List named keys",
      "get": {
        "summary": "List named keys",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/config/{key}": {
      "description": "Configure the key in Vault",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key in Vault.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Configure the key in Vault",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configure the key in Vault",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/deregister/{key}": {
      "description": "Deregister an existing key in Vault",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key to deregister in Vault. If the key exists in Google Cloud KMS, it will be left untouched.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Deregister an existing key in Vault",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Deregister an existing key in Vault",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/keys/register/{key}": {
      "description": "Register an existing crypto key in Google Cloud KMS",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key to register in Vault. This will be the named used to refer to the underlying crypto key when encrypting or decrypting data.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Register an existing crypto key in Google Cloud KMS",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysRegisterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/rotate/{key}": {
      "description": "Rotate a crypto key to a new primary version",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key to rotate. This key must already be registered with Vault and point to a valid Google Cloud KMS crypto key.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Rotate a crypto key to a new primary version",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/trim/{key}": {
      "description": "Delete old crypto key versions from Google Cloud KMS",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key in Vault.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "post": {
        "summary": "Delete old crypto key versions from Google Cloud KMS",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete old crypto key versions from Google Cloud KMS",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/keys/{key}": {
      "description": "Interact with crypto keys in Vault and Google Cloud KMS",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key in Vault.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Interact with crypto keys in Vault and Google Cloud KMS",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Interact with crypto keys in Vault and Google Cloud KMS",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Interact with crypto keys in Vault and Google Cloud KMS",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/pubkey/{key}": {
      "description": "Retrieve the public key associated with the named key",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key for which to get the public key. This key must already exist in Vault and Google Cloud KMS.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Retrieve the public key associated with the named key",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/reencrypt/{key}": {
      "description": "Re-encrypt existing ciphertext data to a new version",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key to use for encryption. This key must already exist in Vault and Google Cloud KMS.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Re-encrypt existing ciphertext data to a new version",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReencryptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sign/{key}": {
      "description": "Signs a message or digest using a named key",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key in Vault to use for signing. This key must already exist in Vault and must map back to a Google Cloud KMS key.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Signs a message or digest using a named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/verify/{key}": {
      "description": "Verify a signature using a named key",
      "parameters": [
        {
          "name": "key",
          "description": "Name of the key in Vault to use for verification. This key must already exist in Vault and must map back to a Google Cloud KMS key.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Verify a signature using a named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigRequest": {
        "type": "object",
        "properties": {
          "credentials": {
            "type": "string",
            "description": "The credentials to use for authenticating to Google Cloud. Leave this blank to use the Default Application Credentials or instance metadata authentication."
          },
          "scopes": {
            "type": "array",
            "description": "The list of full-URL scopes to request when authenticating. By default, this requests https://www.googleapis.com/auth/cloudkms.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DecryptRequest": {
        "type": "object",
        "properties": {
          "additional_authenticated_data": {
            "type": "string",
            "description": "Optional data that was specified during encryption of this payload."
          },
          "ciphertext": {
            "type": "string",
            "description": "Ciphertext to decrypt as previously returned from an encrypt operation. This must be base64-encoded ciphertext as previously returned from an encrypt operation."
          },
          "key_version": {
            "type": "integer",
            "description": "Integer version of the crypto key version to use for decryption. This is required for asymmetric keys. For symmetric keys, Cloud KMS will choose the correct version automatically."
          }
        }
      },
      "EncryptRequest": {
        "type": "object",
        "properties": {
          "additional_authenticated_data": {
            "type": "string",
            "description": "Optional base64-encoded data that, if specified, must also be provided to decrypt this payload."
          },
          "key_version": {
            "type": "integer",
            "description": "Integer version of the crypto key version to use for encryption. If unspecified, this defaults to the latest active crypto key version."
          },
          "plaintext": {
            "type": "string",
            "description": "Plaintext value to be encrypted. This can be a string or binary, but the size is limited. See the Google Cloud KMS documentation for information on size limitations by key types."
          }
        }
      },
      "KeysConfigRequest": {
        "type": "object",
        "properties": {
          "max_version": {
            "type": "integer",
            "description": "Maximum allowed crypto key version. If set to a positive value, key versions greater than the given value are not permitted to be used. If set to 0 or a negative value, there is no maximum key version."
          },
          "min_version": {
            "type": "integer",
            "description": "Minimum allowed crypto key version. If set to a positive value, key versions less than the given value are not permitted to be used. If set to 0 or a negative value, there is no minimum key version. This value only affects encryption/re-encryption, not decryption. To restrict old values from being decrypted, increase this value and then perform a trim operation."
          }
        }
      },
      "KeysRegisterRequest": {
        "type": "object",
        "properties": {
          "crypto_key": {
            "type": "string",
            "description": "Full resource ID of the crypto key including the project, location, key ring, and crypto key like \"projects/%s/locations/%s/keyRings/%s/cryptoKeys/%s\". This crypto key must already exist in Google Cloud KMS unless verify is set to \"false\"."
          },
          "verify": {
            "type": "boolean",
            "description": "Verify that the given Google Cloud KMS crypto key exists and is accessible before creating the storage entry in Vault. Set this to \"false\" if the key will not exist at creation time.",
            "default": true
          }
        }
      },
      "KeysRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Algorithm to use for encryption, decryption, or signing. The value depends on the key purpose. The value cannot be changed after creation. For a key purpose of \"encrypt_decrypt\", the valid values are: - symmetric_encryption (default) For a key purpose of \"asymmetric_sign\", valid values are: - rsa_sign_pss_2048_sha256 - rsa_sign_pss_3072_sha256 - rsa_sign_pss_4096_sha256 - rsa_sign_pkcs1_2048_sha256 - rsa_sign_pkcs1_3072_sha256 - rsa_sign_pkcs1_4096_sha256 - ec_sign_p256_sha256 - ec_sign_p384_sha384 For a key purpose of \"asymmetric_decrypt\", valid values are: - rsa_decrypt_oaep_2048_sha256 - rsa_decrypt_oaep_3072_sha256 - rsa_decrypt_oaep_4096_sha256"
          },
          "crypto_key": {
            "type": "string",
            "description": "Name of the crypto key to use. If the given crypto key does not exist, Vault will try to create it. This defaults to the name of the key given to Vault as the parameter if unspecified."
          },
          "key_ring": {
            "type": "string",
            "description": "Full Google Cloud resource ID of the key ring with the project and location (e.g. projects/my-project/locations/global/keyRings/my-keyring). If the given key ring does not exist, Vault will try to create it during a create operation."
          },
          "labels": {
            "type": "object",
            "description": "Arbitrary key=value label to apply to the crypto key. To specify multiple labels, specify this argument multiple times (e.g. labels=\"a=b\" labels=\"c=d\").",
            "format": "kvpairs"
          },
          "protection_level": {
            "type": "string",
            "description": "Level of protection to use for the key management. Valid values are \"software\" and \"hsm\". The default value is \"software\". The value cannot be changed after creation."
          },
          "purpose": {
            "type": "string",
            "description": "Purpose of the key. Valid options are \"asymmetric_decrypt\", \"asymmetric_sign\", and \"encrypt_decrypt\". The default value is \"encrypt_decrypt\". The value cannot be changed after creation."
          },
          "rotation_period": {
            "type": "integer",
            "description": "Amount of time between crypto key version rotations. This is specified as a time duration value like 72h (72 hours). The smallest possible value is 24h. This value only applies to keys with a purpose of \"encrypt_decrypt\".",
            "format": "seconds"
          }
        }
      },
      "ReencryptRequest": {
        "type": "object",
        "properties": {
          "additional_authenticated_data": {
            "type": "string",
            "description": "Optional data that, if specified, must also be provided during decryption."
          },
          "ciphertext": {
            "type": "string",
            "description": "Ciphertext to be re-encrypted to the latest key version. This must be ciphertext that Vault previously generated for this named key."
          },
          "key_version": {
            "type": "integer",
            "description": "Integer version of the crypto key version to use for the new encryption. If unspecified, this defaults to the latest active crypto key version."
          }
        }
      },
      "SignRequest": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "description": "Digest to sign. This digest must use the same SHA algorithm as the underlying Cloud KMS key. The digest must be the base64-encoded binary value. This field is required."
          },
          "key_version": {
            "type": "integer",
            "description": "Integer version of the crypto key version to use for signing. This field is required."
          }
        }
      },
      "VerifyRequest": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "description": "Digest to verify. This digest must use the same SHA algorithm as the underlying Cloud KMS key. The digest must be the base64-encoded binary value. This field is required."
          },
          "key_version": {
            "type": "integer",
            "description": "Integer version of the crypto key version to use for verification. This field is required."
          },
          "signature": {
            "type": "string",
            "description": "Base64-encoded signature to use for verification. This field is required."
          }
        }
      }
    }
  }
}
