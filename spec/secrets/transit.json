{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/backup/{name}": {
      "description": "Backup the named key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Backup the named key",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cache-config": {
      "description": "Configure caching strategy",
      "x-vault-createSupported": true,
      "get": {
        "summary": "Returns the size of the active cache",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configures a new cache of the specified size",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CacheConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/keys": {
      "description": "Configuration common across all keys",
      "get": {
        "summary": "Configuration common across all keys",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configuration common across all keys",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigKeysRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/datakey/{plaintext}/{name}": {
      "description": "Generate a data key",
      "parameters": [
        {
          "name": "name",
          "description": "The backend key used for encrypting the data key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "plaintext",
          "description": "\"plaintext\" will return the key in both plaintext and ciphertext; \"wrapped\" will return the ciphertext only.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate a data key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatakeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/decrypt/{name}": {
      "description": "Decrypt a ciphertext value using a named key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Decrypt a ciphertext value using a named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DecryptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/encrypt/{name}": {
      "description": "Encrypt a plaintext value or a batch of plaintext blocks using a named key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "post": {
        "summary": "Encrypt a plaintext value or a batch of plaintext\nblocks using a named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/export/{type}/{name}": {
      "description": "Export named encryption or signing key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "type",
          "description": "Type of key to export (encryption-key, signing-key, hmac-key)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Export named encryption or signing key",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/export/{type}/{name}/{version}": {
      "description": "Export named encryption or signing key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "type",
          "description": "Type of key to export (encryption-key, signing-key, hmac-key)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "version",
          "description": "Version of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Export named encryption or signing key",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/hash": {
      "description": "Generate a hash sum for input data",
      "post": {
        "summary": "Generate a hash sum for input data",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/hash/{urlalgorithm}": {
      "description": "Generate a hash sum for input data",
      "parameters": [
        {
          "name": "urlalgorithm",
          "description": "Algorithm to use (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate a hash sum for input data",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HashRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/hmac/{name}": {
      "description": "Generate an HMAC for input data using the named key",
      "parameters": [
        {
          "name": "name",
          "description": "The key to use for the HMAC function",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate an HMAC for input data using the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HmacRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/hmac/{name}/{urlalgorithm}": {
      "description": "Generate an HMAC for input data using the named key",
      "parameters": [
        {
          "name": "name",
          "description": "The key to use for the HMAC function",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "urlalgorithm",
          "description": "Algorithm to use (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate an HMAC for input data using the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HmacRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys": {
      "description": "Managed named encryption keys",
      "get": {
        "summary": "Managed named encryption keys",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/{name}": {
      "description": "Managed named encryption keys",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Managed named encryption keys",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Managed named encryption keys",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Managed named encryption keys",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/keys/{name}/config": {
      "description": "Configure a named encryption key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Configure a named encryption key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/{name}/import": {
      "description": "Imports an externally-generated key into a new transit key",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Imports an externally-generated key into a new transit key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/{name}/import_version": {
      "description": "Imports an externally-generated key into an existing imported key",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Imports an externally-generated key into an existing imported key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysImportVersionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/{name}/rotate": {
      "description": "Rotate named encryption key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Rotate named encryption key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysRotateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/{name}/trim": {
      "description": "Trim key versions of a named key",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Trim key versions of a named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysTrimRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/random": {
      "description": "Generate random bytes",
      "post": {
        "summary": "Generate random bytes",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RandomRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/random/{source}": {
      "description": "Generate random bytes",
      "parameters": [
        {
          "name": "source",
          "description": "Which system to source random data from, ether \"platform\", \"seal\", or \"all\".",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "platform"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate random bytes",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RandomRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/random/{source}/{urlbytes}": {
      "description": "Generate random bytes",
      "parameters": [
        {
          "name": "source",
          "description": "Which system to source random data from, ether \"platform\", \"seal\", or \"all\".",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "platform"
          },
          "required": true
        },
        {
          "name": "urlbytes",
          "description": "The number of bytes to generate (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate random bytes",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RandomRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/random/{urlbytes}": {
      "description": "Generate random bytes",
      "parameters": [
        {
          "name": "urlbytes",
          "description": "The number of bytes to generate (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate random bytes",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RandomRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/restore": {
      "description": "Restore the named key",
      "post": {
        "summary": "Restore the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/restore/{name}": {
      "description": "Restore the named key",
      "parameters": [
        {
          "name": "name",
          "description": "If set, this will be the name of the restored key.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Restore the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rewrap/{name}": {
      "description": "Rewrap ciphertext",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the key",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Rewrap ciphertext",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RewrapRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sign/{name}": {
      "description": "Generate a signature for input data using the named key",
      "parameters": [
        {
          "name": "name",
          "description": "The key to use",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate a signature for input data using the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sign/{name}/{urlalgorithm}": {
      "description": "Generate a signature for input data using the named key",
      "parameters": [
        {
          "name": "name",
          "description": "The key to use",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "urlalgorithm",
          "description": "Hash algorithm to use (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Generate a signature for input data using the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/verify/{name}": {
      "description": "Verify a signature or HMAC for input data created using the named key",
      "parameters": [
        {
          "name": "name",
          "description": "The key to use",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Verify a signature or HMAC for input data created using the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/verify/{name}/{urlalgorithm}": {
      "description": "Verify a signature or HMAC for input data created using the named key",
      "parameters": [
        {
          "name": "name",
          "description": "The key to use",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "name": "urlalgorithm",
          "description": "Hash algorithm to use (POST URL parameter)",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Verify a signature or HMAC for input data created using the named key",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wrapping_key": {
      "description": "Returns the public key to use for wrapping imported keys",
      "get": {
        "summary": "Returns the public key to use for wrapping imported keys",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CacheConfigRequest": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Size of cache, use 0 for an unlimited cache size, defaults to 0",
            "default": 0
          }
        }
      },
      "ConfigKeysRequest": {
        "type": "object",
        "properties": {
          "disable_upsert": {
            "type": "boolean",
            "description": "Whether to allow automatic upserting (creation) of keys on the encrypt endpoint."
          }
        }
      },
      "DatakeyRequest": {
        "type": "object",
        "properties": {
          "bits": {
            "type": "integer",
            "description": "Number of bits for the key; currently 128, 256, and 512 bits are supported. Defaults to 256.",
            "default": 256
          },
          "context": {
            "type": "string",
            "description": "Context for key derivation. Required for derived keys."
          },
          "key_version": {
            "type": "integer",
            "description": "The version of the Vault key to use for encryption of the data key. Must be 0 (for latest) or a value greater than or equal to the min_encryption_version configured on the key."
          },
          "nonce": {
            "type": "string",
            "description": "Nonce for when convergent encryption v1 is used (only in Vault 0.6.1)"
          }
        }
      },
      "DecryptRequest": {
        "type": "object",
        "properties": {
          "associated_data": {
            "type": "string",
            "description": "When using an AEAD cipher mode, such as AES-GCM, this parameter allows passing associated data (AD/AAD) into the encryption function; this data must be passed on subsequent decryption requests but can be transited in plaintext. On successful decryption, both the ciphertext and the associated data are attested not to have been tampered with."
          },
          "batch_input": {
            "type": "array",
            "description": "Specifies a list of items to be decrypted in a single batch. When this parameter is set, if the parameters 'ciphertext', 'context' and 'nonce' are also set, they will be ignored. Any batch output will preserve the order of the batch input.",
            "items": {
              "type": "object"
            }
          },
          "ciphertext": {
            "type": "string",
            "description": "The ciphertext to decrypt, provided as returned by encrypt."
          },
          "context": {
            "type": "string",
            "description": "Base64 encoded context for key derivation. Required if key derivation is enabled."
          },
          "nonce": {
            "type": "string",
            "description": "Base64 encoded nonce value used during encryption. Must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. Not required for keys created in 0.6.2+."
          },
          "partial_failure_response_code": {
            "type": "integer",
            "description": "Ordinarily, if a batch item fails to decrypt due to a bad input, but other batch items succeed, the HTTP response code is 400 (Bad Request). Some applications may want to treat partial failures differently. Providing the parameter returns the given response code integer instead of a 400 in this case. If all values fail HTTP 400 is still returned."
          }
        }
      },
      "EncryptRequest": {
        "type": "object",
        "properties": {
          "associated_data": {
            "type": "string",
            "description": "When using an AEAD cipher mode, such as AES-GCM, this parameter allows passing associated data (AD/AAD) into the encryption function; this data must be passed on subsequent decryption requests but can be transited in plaintext. On successful decryption, both the ciphertext and the associated data are attested not to have been tampered with."
          },
          "batch_input": {
            "type": "array",
            "description": "Specifies a list of items to be encrypted in a single batch. When this parameter is set, if the parameters 'plaintext', 'context' and 'nonce' are also set, they will be ignored. Any batch output will preserve the order of the batch input.",
            "items": {
              "type": "object"
            }
          },
          "context": {
            "type": "string",
            "description": "Base64 encoded context for key derivation. Required if key derivation is enabled"
          },
          "convergent_encryption": {
            "type": "boolean",
            "description": "This parameter will only be used when a key is expected to be created. Whether to support convergent encryption. This is only supported when using a key with key derivation enabled and will require all requests to carry both a context and 96-bit (12-byte) nonce. The given nonce will be used in place of a randomly generated nonce. As a result, when the same context and nonce are supplied, the same ciphertext is generated. It is *very important* when using this mode that you ensure that all nonces are unique for a given context. Failing to do so will severely impact the ciphertext's security."
          },
          "key_version": {
            "type": "integer",
            "description": "The version of the key to use for encryption. Must be 0 (for latest) or a value greater than or equal to the min_encryption_version configured on the key."
          },
          "nonce": {
            "type": "string",
            "description": "Base64 encoded nonce value. Must be provided if convergent encryption is enabled for this key and the key was generated with Vault 0.6.1. Not required for keys created in 0.6.2+. The value must be exactly 96 bits (12 bytes) long and the user must ensure that for any given context (and thus, any given encryption key) this nonce value is **never reused**."
          },
          "partial_failure_response_code": {
            "type": "integer",
            "description": "Ordinarily, if a batch item fails to encrypt due to a bad input, but other batch items succeed, the HTTP response code is 400 (Bad Request). Some applications may want to treat partial failures differently. Providing the parameter returns the given response code integer instead of a 400 in this case. If all values fail HTTP 400 is still returned."
          },
          "plaintext": {
            "type": "string",
            "description": "Base64 encoded plaintext value to be encrypted"
          },
          "type": {
            "type": "string",
            "description": "This parameter is required when encryption key is expected to be created. When performing an upsert operation, the type of key to create. Currently, \"aes128-gcm96\" (symmetric) and \"aes256-gcm96\" (symmetric) are the only types supported. Defaults to \"aes256-gcm96\".",
            "default": "aes256-gcm96"
          }
        }
      },
      "HashRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Algorithm to use (POST body parameter). Valid values are: * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 Defaults to \"sha2-256\".",
            "default": "sha2-256"
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"hex\".",
            "default": "hex"
          },
          "input": {
            "type": "string",
            "description": "The base64-encoded input data"
          }
        }
      },
      "HmacRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Algorithm to use (POST body parameter). Valid values are: * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 Defaults to \"sha2-256\".",
            "default": "sha2-256"
          },
          "batch_input": {
            "type": "array",
            "description": "Specifies a list of items to be processed in a single batch. When this parameter is set, if the parameter 'input' is also set, it will be ignored. Any batch output will preserve the order of the batch input.",
            "items": {
              "type": "object"
            }
          },
          "input": {
            "type": "string",
            "description": "The base64-encoded input data"
          },
          "key_version": {
            "type": "integer",
            "description": "The version of the key to use for generating the HMAC. Must be 0 (for latest) or a value greater than or equal to the min_encryption_version configured on the key."
          }
        }
      },
      "KeysConfigRequest": {
        "type": "object",
        "properties": {
          "allow_plaintext_backup": {
            "type": "boolean",
            "description": "Enables taking a backup of the named key in plaintext format. Once set, this cannot be disabled."
          },
          "auto_rotate_period": {
            "type": "integer",
            "description": "Amount of time the key should live before being automatically rotated. A value of 0 disables automatic rotation for the key.",
            "format": "seconds"
          },
          "deletion_allowed": {
            "type": "boolean",
            "description": "Whether to allow deletion of the key"
          },
          "exportable": {
            "type": "boolean",
            "description": "Enables export of the key. Once set, this cannot be disabled."
          },
          "min_decryption_version": {
            "type": "integer",
            "description": "If set, the minimum version of the key allowed to be decrypted. For signing keys, the minimum version allowed to be used for verification."
          },
          "min_encryption_version": {
            "type": "integer",
            "description": "If set, the minimum version of the key allowed to be used for encryption; or for signing keys, to be used for signing. If set to zero, only the latest version of the key is allowed."
          }
        }
      },
      "KeysImportRequest": {
        "type": "object",
        "properties": {
          "allow_plaintext_backup": {
            "type": "boolean",
            "description": "Enables taking a backup of the named key in plaintext format. Once set, this cannot be disabled."
          },
          "allow_rotation": {
            "type": "boolean",
            "description": "True if the imported key may be rotated within Vault; false otherwise."
          },
          "auto_rotate_period": {
            "type": "integer",
            "description": "Amount of time the key should live before being automatically rotated. A value of 0 (default) disables automatic rotation for the key.",
            "format": "seconds",
            "default": 0
          },
          "ciphertext": {
            "type": "string",
            "description": "The base64-encoded ciphertext of the keys. The AES key should be encrypted using OAEP with the wrapping key and then concatenated with the import key, wrapped by the AES key."
          },
          "context": {
            "type": "string",
            "description": "Base64 encoded context for key derivation. When reading a key with key derivation enabled, if the key type supports public keys, this will return the public key for the given context."
          },
          "derived": {
            "type": "boolean",
            "description": "Enables key derivation mode. This allows for per-transaction unique keys for encryption operations."
          },
          "exportable": {
            "type": "boolean",
            "description": "Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported."
          },
          "hash_function": {
            "type": "string",
            "description": "The hash function used as a random oracle in the OAEP wrapping of the user-generated, ephemeral AES key. Can be one of \"SHA1\", \"SHA224\", \"SHA256\" (default), \"SHA384\", or \"SHA512\"",
            "default": "SHA256"
          },
          "type": {
            "type": "string",
            "description": "The type of key being imported. Currently, \"aes128-gcm96\" (symmetric), \"aes256-gcm96\" (symmetric), \"ecdsa-p256\" (asymmetric), \"ecdsa-p384\" (asymmetric), \"ecdsa-p521\" (asymmetric), \"ed25519\" (asymmetric), \"rsa-2048\" (asymmetric), \"rsa-3072\" (asymmetric), \"rsa-4096\" (asymmetric) are supported. Defaults to \"aes256-gcm96\".",
            "default": "aes256-gcm96"
          }
        }
      },
      "KeysImportVersionRequest": {
        "type": "object",
        "properties": {
          "ciphertext": {
            "type": "string",
            "description": "The base64-encoded ciphertext of the keys. The AES key should be encrypted using OAEP with the wrapping key and then concatenated with the import key, wrapped by the AES key."
          },
          "hash_function": {
            "type": "string",
            "description": "The hash function used as a random oracle in the OAEP wrapping of the user-generated, ephemeral AES key. Can be one of \"SHA1\", \"SHA224\", \"SHA256\" (default), \"SHA384\", or \"SHA512\"",
            "default": "SHA256"
          }
        }
      },
      "KeysRequest": {
        "type": "object",
        "properties": {
          "allow_plaintext_backup": {
            "type": "boolean",
            "description": "Enables taking a backup of the named key in plaintext format. Once set, this cannot be disabled."
          },
          "auto_rotate_period": {
            "type": "integer",
            "description": "Amount of time the key should live before being automatically rotated. A value of 0 (default) disables automatic rotation for the key.",
            "format": "seconds",
            "default": 0
          },
          "context": {
            "type": "string",
            "description": "Base64 encoded context for key derivation. When reading a key with key derivation enabled, if the key type supports public keys, this will return the public key for the given context."
          },
          "convergent_encryption": {
            "type": "boolean",
            "description": "Whether to support convergent encryption. This is only supported when using a key with key derivation enabled and will require all requests to carry both a context and 96-bit (12-byte) nonce. The given nonce will be used in place of a randomly generated nonce. As a result, when the same context and nonce are supplied, the same ciphertext is generated. It is *very important* when using this mode that you ensure that all nonces are unique for a given context. Failing to do so will severely impact the ciphertext's security."
          },
          "derived": {
            "type": "boolean",
            "description": "Enables key derivation mode. This allows for per-transaction unique keys for encryption operations."
          },
          "exportable": {
            "type": "boolean",
            "description": "Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported."
          },
          "key_size": {
            "type": "integer",
            "description": "The key size in bytes for the algorithm. Only applies to HMAC and must be no fewer than 32 bytes and no more than 512",
            "default": 0
          },
          "managed_key_id": {
            "type": "string",
            "description": "The UUID of the managed key to use for this transit key"
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use for this transit key"
          },
          "type": {
            "type": "string",
            "description": "The type of key to create. Currently, \"aes128-gcm96\" (symmetric), \"aes256-gcm96\" (symmetric), \"ecdsa-p256\" (asymmetric), \"ecdsa-p384\" (asymmetric), \"ecdsa-p521\" (asymmetric), \"ed25519\" (asymmetric), \"rsa-2048\" (asymmetric), \"rsa-3072\" (asymmetric), \"rsa-4096\" (asymmetric) are supported. Defaults to \"aes256-gcm96\".",
            "default": "aes256-gcm96"
          }
        }
      },
      "KeysRotateRequest": {
        "type": "object",
        "properties": {
          "managed_key_id": {
            "type": "string",
            "description": "The UUID of the managed key to use for the new version of this transit key"
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use for the new version of this transit key"
          }
        }
      },
      "KeysTrimRequest": {
        "type": "object",
        "properties": {
          "min_available_version": {
            "type": "integer",
            "description": "The minimum available version for the key ring. All versions before this version will be permanently deleted. This value can at most be equal to the lesser of 'min_decryption_version' and 'min_encryption_version'. This is not allowed to be set when either 'min_encryption_version' or 'min_decryption_version' is set to zero."
          }
        }
      },
      "RandomRequest": {
        "type": "object",
        "properties": {
          "bytes": {
            "type": "integer",
            "description": "The number of bytes to generate (POST body parameter). Defaults to 32 (256 bits).",
            "default": 32
          },
          "format": {
            "type": "string",
            "description": "Encoding format to use. Can be \"hex\" or \"base64\". Defaults to \"base64\".",
            "default": "base64"
          }
        }
      },
      "RestoreRequest": {
        "type": "object",
        "properties": {
          "backup": {
            "type": "string",
            "description": "Backed up key data to be restored. This should be the output from the 'backup/' endpoint."
          },
          "force": {
            "type": "boolean",
            "description": "If set and a key by the given name exists, force the restore operation and override the key.",
            "default": false
          }
        }
      },
      "RewrapRequest": {
        "type": "object",
        "properties": {
          "batch_input": {
            "type": "array",
            "description": "Specifies a list of items to be re-encrypted in a single batch. When this parameter is set, if the parameters 'ciphertext', 'context' and 'nonce' are also set, they will be ignored. Any batch output will preserve the order of the batch input.",
            "items": {
              "type": "object"
            }
          },
          "ciphertext": {
            "type": "string",
            "description": "Ciphertext value to rewrap"
          },
          "context": {
            "type": "string",
            "description": "Base64 encoded context for key derivation. Required for derived keys."
          },
          "key_version": {
            "type": "integer",
            "description": "The version of the key to use for encryption. Must be 0 (for latest) or a value greater than or equal to the min_encryption_version configured on the key."
          },
          "nonce": {
            "type": "string",
            "description": "Nonce for when convergent encryption is used"
          }
        }
      },
      "SignRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Deprecated: use \"hash_algorithm\" instead.",
            "default": "sha2-256"
          },
          "batch_input": {
            "type": "array",
            "description": "Specifies a list of items for processing. When this parameter is set, any supplied 'input' or 'context' parameters will be ignored. Responses are returned in the 'batch_results' array component of the 'data' element of the response. Any batch output will preserve the order of the batch input",
            "items": {
              "type": "object"
            }
          },
          "context": {
            "type": "string",
            "description": "Base64 encoded context for key derivation. Required if key derivation is enabled; currently only available with ed25519 keys."
          },
          "hash_algorithm": {
            "type": "string",
            "description": "Hash algorithm to use (POST body parameter). Valid values are: * sha1 * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 * none Defaults to \"sha2-256\". Not valid for all key types, including ed25519. Using none requires setting prehashed=true and signature_algorithm=pkcs1v15, yielding a PKCSv1_5_NoOID instead of the usual PKCSv1_5_DERnull signature.",
            "default": "sha2-256"
          },
          "input": {
            "type": "string",
            "description": "The base64-encoded input data"
          },
          "key_version": {
            "type": "integer",
            "description": "The version of the key to use for signing. Must be 0 (for latest) or a value greater than or equal to the min_encryption_version configured on the key."
          },
          "marshaling_algorithm": {
            "type": "string",
            "description": "The method by which to marshal the signature. The default is 'asn1' which is used by openssl and X.509. It can also be set to 'jws' which is used for JWT signatures; setting it to this will also cause the encoding of the signature to be url-safe base64 instead of using standard base64 encoding. Currently only valid for ECDSA P-256 key types\".",
            "default": "asn1"
          },
          "prehashed": {
            "type": "boolean",
            "description": "Set to 'true' when the input is already hashed. If the key type is 'rsa-2048', 'rsa-3072' or 'rsa-4096', then the algorithm used to hash the input should be indicated by the 'algorithm' parameter."
          },
          "salt_length": {
            "type": "string",
            "description": "The salt length used to sign. Currently only applies to the RSA PSS signature scheme. Options are 'auto' (the default used by Golang, causing the salt to be as large as possible when signing), 'hash' (causes the salt length to equal the length of the hash used in the signature), or an integer between the minimum and the maximum permissible salt lengths for the given RSA key size. Defaults to 'auto'.",
            "default": "auto"
          },
          "signature_algorithm": {
            "type": "string",
            "description": "The signature algorithm to use for signing. Currently only applies to RSA key types. Options are 'pss' or 'pkcs1v15'. Defaults to 'pss'"
          }
        }
      },
      "VerifyRequest": {
        "type": "object",
        "properties": {
          "algorithm": {
            "type": "string",
            "description": "Deprecated: use \"hash_algorithm\" instead.",
            "default": "sha2-256"
          },
          "batch_input": {
            "type": "array",
            "description": "Specifies a list of items for processing. When this parameter is set, any supplied 'input', 'hmac' or 'signature' parameters will be ignored. Responses are returned in the 'batch_results' array component of the 'data' element of the response. Any batch output will preserve the order of the batch input",
            "items": {
              "type": "object"
            }
          },
          "context": {
            "type": "string",
            "description": "Base64 encoded context for key derivation. Required if key derivation is enabled; currently only available with ed25519 keys."
          },
          "hash_algorithm": {
            "type": "string",
            "description": "Hash algorithm to use (POST body parameter). Valid values are: * sha1 * sha2-224 * sha2-256 * sha2-384 * sha2-512 * sha3-224 * sha3-256 * sha3-384 * sha3-512 * none Defaults to \"sha2-256\". Not valid for all key types. See note about none on signing path.",
            "default": "sha2-256"
          },
          "hmac": {
            "type": "string",
            "description": "The HMAC, including vault header/key version"
          },
          "input": {
            "type": "string",
            "description": "The base64-encoded input data to verify"
          },
          "marshaling_algorithm": {
            "type": "string",
            "description": "The method by which to unmarshal the signature when verifying. The default is 'asn1' which is used by openssl and X.509; can also be set to 'jws' which is used for JWT signatures in which case the signature is also expected to be url-safe base64 encoding instead of standard base64 encoding. Currently only valid for ECDSA P-256 key types\".",
            "default": "asn1"
          },
          "prehashed": {
            "type": "boolean",
            "description": "Set to 'true' when the input is already hashed. If the key type is 'rsa-2048', 'rsa-3072' or 'rsa-4096', then the algorithm used to hash the input should be indicated by the 'algorithm' parameter."
          },
          "salt_length": {
            "type": "string",
            "description": "The salt length used to sign. Currently only applies to the RSA PSS signature scheme. Options are 'auto' (the default used by Golang, causing the salt to be as large as possible when signing), 'hash' (causes the salt length to equal the length of the hash used in the signature), or an integer between the minimum and the maximum permissible salt lengths for the given RSA key size. Defaults to 'auto'.",
            "default": "auto"
          },
          "signature": {
            "type": "string",
            "description": "The signature, including vault header/key version"
          },
          "signature_algorithm": {
            "type": "string",
            "description": "The signature algorithm to use for signature verification. Currently only applies to RSA key types. Options are 'pss' or 'pkcs1v15'. Defaults to 'pss'"
          }
        }
      }
    }
  }
}
