{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/ca": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ca/pem": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ca_chain": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cert/ca_chain": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cert/crl": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cert/delta-crl": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cert/{serial}": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "parameters": [
        {
          "name": "serial",
          "description": "Certificate serial number, in colon- or hyphen-separated octal",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cert/{serial}/raw": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "parameters": [
        {
          "name": "serial",
          "description": "Certificate serial number, in colon- or hyphen-separated octal",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/cert/{serial}/raw/pem": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "parameters": [
        {
          "name": "serial",
          "description": "Certificate serial number, in colon- or hyphen-separated octal",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/certs": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/certs/revoked": {
      "description": "List all revoked serial numbers within the local cluster",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/auto-tidy": {
      "description": "Modifies the current configuration for automatic tidy execution.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigAutoTidyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/ca": {
      "description": "Set the CA certificate and private key used for generated credentials.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigCaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/cluster": {
      "description": "Set cluster-local configuration, including address to this PR cluster.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/crl": {
      "description": "Configure the CRL expiration.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigCrlRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/issuers": {
      "description": "Read and set the default issuer certificate for signing.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigIssuersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/keys": {
      "description": "Read and set the default key used for signing",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigKeysRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/urls": {
      "description": "Set the URLs for the issuing CA, CRL distribution points, and OCSP servers.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigUrlsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crl": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crl/delta": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crl/delta/pem": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crl/pem": {
      "description": "Fetch a CA, CRL, CA Chain, or non-revoked certificate.",
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crl/rotate": {
      "description": "Force a rebuild of the CRL.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crl/rotate-delta": {
      "description": "Force a rebuild of the delta CRL.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/intermediate/cross-sign": {
      "description": "Generate a new CSR and private key used for signing.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntermediateCrossSignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/intermediate/generate/{exported}": {
      "description": "Generate a new CSR and private key used for signing.",
      "parameters": [
        {
          "name": "exported",
          "description": "Must be \"internal\", \"exported\" or \"kms\". If set to \"exported\", the generated private key will be returned. This is your *only* chance to retrieve the private key!",
          "in": "path",
          "schema": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "kms"
            ]
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntermediateGenerateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/intermediate/set-signed": {
      "description": "Provide the signed intermediate CA cert.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntermediateSetSignedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issue/{role}": {
      "description": "Request a certificate using a certain role with the provided details.",
      "parameters": [
        {
          "name": "role",
          "description": "The desired role with configuration for this request",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}": {
      "description": "Fetch a single issuer certificate.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/crl": {
      "description": "Fetch an issuer's Certificate Revocation Log (CRL).",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/crl/delta": {
      "description": "Fetch an issuer's Certificate Revocation Log (CRL).",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/crl/delta/der": {
      "description": "Fetch an issuer's Certificate Revocation Log (CRL).",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/crl/delta/pem": {
      "description": "Fetch an issuer's Certificate Revocation Log (CRL).",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/crl/der": {
      "description": "Fetch an issuer's Certificate Revocation Log (CRL).",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/crl/pem": {
      "description": "Fetch an issuer's Certificate Revocation Log (CRL).",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/der": {
      "description": "Fetch a single issuer certificate.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerDerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/issue/{role}": {
      "description": "Request a certificate using a certain role with the provided details.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        },
        {
          "name": "role",
          "description": "The desired role with configuration for this request",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerIssueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/json": {
      "description": "Fetch a single issuer certificate.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerJsonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/pem": {
      "description": "Fetch a single issuer certificate.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerPemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/resign-crls": {
      "description": "Combine and sign with the provided issuer different CRLs",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerResignCrlsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/revoke": {
      "description": "Revoke the specified issuer certificate.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/sign-intermediate": {
      "description": "Issue an intermediate CA certificate based on the provided CSR.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerSignIntermediateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/sign-revocation-list": {
      "description": "Generate and sign a CRL based on the provided parameters.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerSignRevocationListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/sign-self-issued": {
      "description": "Re-issue a self-signed certificate based on the provided certificate.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerSignSelfIssuedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/sign-verbatim": {
      "description": "Issue a certificate directly based on the provided CSR.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerSignVerbatimRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/sign-verbatim/{role}": {
      "description": "Issue a certificate directly based on the provided CSR.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        },
        {
          "name": "role",
          "description": "The desired role with configuration for this request",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerSignVerbatimRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuer/{issuer_ref}/sign/{role}": {
      "description": "Request certificates using a certain role with the provided details.",
      "parameters": [
        {
          "name": "issuer_ref",
          "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        },
        {
          "name": "role",
          "description": "The desired role with configuration for this request",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuerSignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuers": {
      "description": "Fetch a list of CA certificates.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuers/generate/intermediate/{exported}": {
      "description": "Generate a new CSR and private key used for signing.",
      "parameters": [
        {
          "name": "exported",
          "description": "Must be \"internal\", \"exported\" or \"kms\". If set to \"exported\", the generated private key will be returned. This is your *only* chance to retrieve the private key!",
          "in": "path",
          "schema": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "kms"
            ]
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuersGenerateIntermediateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuers/generate/root/{exported}": {
      "description": "Generate a new CA certificate and private key used for signing.",
      "parameters": [
        {
          "name": "exported",
          "description": "Must be \"internal\", \"exported\" or \"kms\". If set to \"exported\", the generated private key will be returned. This is your *only* chance to retrieve the private key!",
          "in": "path",
          "schema": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "kms"
            ]
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuersGenerateRootRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuers/import/bundle": {
      "description": "Import the specified issuing certificates.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuersImportBundleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issuers/import/cert": {
      "description": "Import the specified issuing certificates.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssuersImportCertRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/key/{key_ref}": {
      "description": "Fetch a single issuer key",
      "parameters": [
        {
          "name": "key_ref",
          "description": "Reference to key; either \"default\" for the configured default key, an identifier of a key, or the name assigned to the key.",
          "in": "path",
          "schema": {
            "type": "string",
            "default": "default"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/keys": {
      "description": "Fetch a list of all issuer keys",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/generate/exported": {
      "description": "Generate a new private key used for signing.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysGenerateExportedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/generate/internal": {
      "description": "Generate a new private key used for signing.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysGenerateInternalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/generate/kms": {
      "description": "Generate a new private key used for signing.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysGenerateKmsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/keys/import": {
      "description": "Import the specified key.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeysImportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ocsp": {
      "description": "Query a certificate's revocation status through OCSP'",
      "x-vault-unauthenticated": true,
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ocsp/{req}": {
      "description": "Query a certificate's revocation status through OCSP'",
      "parameters": [
        {
          "name": "req",
          "description": "base-64 encoded ocsp request",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-unauthenticated": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/revoke": {
      "description": "Revoke a certificate by serial number or with explicit certificate. When calling /revoke-with-key, the private key corresponding to the certificate must be provided to authenticate the request.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/revoke-with-key": {
      "description": "Revoke a certificate by serial number or with explicit certificate. When calling /revoke-with-key, the private key corresponding to the certificate must be provided to authenticate the request.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeWithKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles": {
      "description": "List the existing roles in this backend",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles/{name}": {
      "description": "Manage the roles that can be created with this backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/root": {
      "description": "Deletes the root CA key to allow a new one to be generated.",
      "x-vault-sudo": true,
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/root/generate/{exported}": {
      "description": "Generate a new CA certificate and private key used for signing.",
      "parameters": [
        {
          "name": "exported",
          "description": "Must be \"internal\", \"exported\" or \"kms\". If set to \"exported\", the generated private key will be returned. This is your *only* chance to retrieve the private key!",
          "in": "path",
          "schema": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "kms"
            ]
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootGenerateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/root/replace": {
      "description": "Read and set the default issuer certificate for signing.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootReplaceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/root/rotate/{exported}": {
      "description": "Generate a new CA certificate and private key used for signing.",
      "parameters": [
        {
          "name": "exported",
          "description": "Must be \"internal\", \"exported\" or \"kms\". If set to \"exported\", the generated private key will be returned. This is your *only* chance to retrieve the private key!",
          "in": "path",
          "schema": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "kms"
            ]
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootRotateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/root/sign-intermediate": {
      "description": "Issue an intermediate CA certificate based on the provided CSR.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootSignIntermediateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/root/sign-self-issued": {
      "description": "Re-issue a self-signed certificate based on the provided certificate.",
      "x-vault-sudo": true,
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RootSignSelfIssuedRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sign-verbatim": {
      "description": "Issue a certificate directly based on the provided CSR.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignVerbatimRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sign-verbatim/{role}": {
      "description": "Issue a certificate directly based on the provided CSR.",
      "parameters": [
        {
          "name": "role",
          "description": "The desired role with configuration for this request",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignVerbatimRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/sign/{role}": {
      "description": "Request certificates using a certain role with the provided details.",
      "parameters": [
        {
          "name": "role",
          "description": "The desired role with configuration for this request",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/tidy": {
      "description": "Tidy up the backend by removing expired certificates, revocation information, or both.",
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TidyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/tidy-cancel": {
      "description": "Cancels a currently running tidy operation.",
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/tidy-status": {
      "description": "Returns the status of the tidy operation.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigAutoTidyRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Set to true to enable automatic tidy operations."
          },
          "interval_duration": {
            "type": "integer",
            "description": "Interval at which to run an auto-tidy operation. This is the time between tidy invocations (after one finishes to the start of the next). Running a manual tidy will reset this duration.",
            "format": "seconds",
            "default": 43200
          },
          "issuer_safety_buffer": {
            "type": "integer",
            "description": "The amount of extra time that must have passed beyond issuer's expiration before it is removed from the backend storage. Defaults to 8760 hours (1 year).",
            "format": "seconds",
            "default": 31536000
          },
          "pause_duration": {
            "type": "string",
            "description": "The amount of time to wait between processing certificates. This allows operators to change the execution profile of tidy to take consume less resources by slowing down how long it takes to run. Note that the entire list of certificates will be stored in memory during the entire tidy operation, but resources to read/process/update existing entries will be spread out over a greater period of time. By default this is zero seconds.",
            "default": "0s"
          },
          "revocation_queue_safety_buffer": {
            "type": "integer",
            "description": "The amount of time that must pass from the cross-cluster revocation request being initiated to when it will be slated for removal. Setting this too low may remove valid revocation requests before the owning cluster has a chance to process them, especially if the cluster is offline.",
            "format": "seconds",
            "default": 172800
          },
          "safety_buffer": {
            "type": "integer",
            "description": "The amount of extra time that must have passed beyond certificate expiration before it is removed from the backend storage and/or revocation list. Defaults to 72 hours.",
            "format": "seconds",
            "default": 259200
          },
          "tidy_cert_store": {
            "type": "boolean",
            "description": "Set to true to enable tidying up the certificate store"
          },
          "tidy_cross_cluster_revoked_certs": {
            "type": "boolean",
            "description": "Set to true to enable tidying up the cross-cluster revoked certificate store. Only runs on the active primary node."
          },
          "tidy_expired_issuers": {
            "type": "boolean",
            "description": "Set to true to automatically remove expired issuers past the issuer_safety_buffer. No keys will be removed as part of this operation."
          },
          "tidy_move_legacy_ca_bundle": {
            "type": "boolean",
            "description": "Set to true to move the legacy ca_bundle from /config/ca_bundle to /config/ca_bundle.bak. This prevents downgrades to pre-Vault 1.11 versions (as older PKI engines do not know about the new multi-issuer storage layout), but improves the performance on seal wrapped PKI mounts. This will only occur if at least issuer_safety_buffer time has occurred after the initial storage migration. This backup is saved in case of an issue in future migrations. Operators may consider removing it via sys/raw if they desire. The backup will be removed via a DELETE /root call, but note that this removes ALL issuers within the mount (and is thus not desirable in most operational scenarios)."
          },
          "tidy_revocation_list": {
            "type": "boolean",
            "description": "Deprecated; synonym for 'tidy_revoked_certs"
          },
          "tidy_revocation_queue": {
            "type": "boolean",
            "description": "Set to true to remove stale revocation queue entries that haven't been confirmed by any active cluster. Only runs on the active primary node",
            "default": false
          },
          "tidy_revoked_cert_issuer_associations": {
            "type": "boolean",
            "description": "Set to true to validate issuer associations on revocation entries. This helps increase the performance of CRL building and OCSP responses."
          },
          "tidy_revoked_certs": {
            "type": "boolean",
            "description": "Set to true to expire all revoked and expired certificates, removing them both from the CRL and from storage. The CRL will be rotated if this causes any values to be removed."
          }
        }
      },
      "ConfigCaRequest": {
        "type": "object",
        "properties": {
          "pem_bundle": {
            "type": "string",
            "description": "PEM-format, concatenated unencrypted secret key and certificate."
          }
        }
      },
      "ConfigClusterRequest": {
        "type": "object",
        "properties": {
          "aia_path": {
            "type": "string",
            "description": "Optional URI to this mount's AIA distribution point; may refer to an external non-Vault responder. This is for resolving AIA URLs and providing the {{cluster_aia_path}} template parameter and will not be used for other purposes. As such, unlike path above, this could safely be an insecure transit mechanism (like HTTP without TLS). For example: http://cdn.example.com/pr1/pki"
          },
          "path": {
            "type": "string",
            "description": "Canonical URI to this mount on this performance replication cluster's external address. This is for resolving AIA URLs and providing the {{cluster_path}} template parameter but might be used for other purposes in the future. This should only point back to this particular PR replica and should not ever point to another PR cluster. It may point to any node in the PR replica, including standby nodes, and need not always point to the active node. For example: https://pr1.vault.example.com:8200/v1/pki"
          }
        }
      },
      "ConfigCrlRequest": {
        "type": "object",
        "properties": {
          "auto_rebuild": {
            "type": "boolean",
            "description": "If set to true, enables automatic rebuilding of the CRL"
          },
          "auto_rebuild_grace_period": {
            "type": "string",
            "description": "The time before the CRL expires to automatically rebuild it, when enabled. Must be shorter than the CRL expiry. Defaults to 12h.",
            "default": "12h"
          },
          "cross_cluster_revocation": {
            "type": "boolean",
            "description": "Whether to enable a global, cross-cluster revocation queue. Must be used with auto_rebuild=true."
          },
          "delta_rebuild_interval": {
            "type": "string",
            "description": "The time between delta CRL rebuilds if a new revocation has occurred. Must be shorter than the CRL expiry. Defaults to 15m.",
            "default": "15m"
          },
          "disable": {
            "type": "boolean",
            "description": "If set to true, disables generating the CRL entirely."
          },
          "enable_delta": {
            "type": "boolean",
            "description": "Whether to enable delta CRLs between authoritative CRL rebuilds"
          },
          "expiry": {
            "type": "string",
            "description": "The amount of time the generated CRL should be valid; defaults to 72 hours",
            "default": "72h"
          },
          "ocsp_disable": {
            "type": "boolean",
            "description": "If set to true, ocsp unauthorized responses will be returned."
          },
          "ocsp_expiry": {
            "type": "string",
            "description": "The amount of time an OCSP response will be valid (controls the NextUpdate field); defaults to 12 hours",
            "default": "1h"
          },
          "unified_crl": {
            "type": "boolean",
            "description": "If set to true enables global replication of revocation entries, also enabling unified versions of OCSP and CRLs if their respective features are enabled. disable for CRLs and ocsp_disable for OCSP.",
            "default": "false"
          },
          "unified_crl_on_existing_paths": {
            "type": "boolean",
            "description": "If set to true, existing CRL and OCSP paths will return the unified CRL instead of a response based on cluster-local data",
            "default": "false"
          }
        }
      },
      "ConfigIssuersRequest": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "description": "Reference (name or identifier) to the default issuer."
          },
          "default_follows_latest_issuer": {
            "type": "boolean",
            "description": "Whether the default issuer should automatically follow the latest generated or imported issuer. Defaults to false.",
            "default": false
          }
        }
      },
      "ConfigKeysRequest": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "description": "Reference (name or identifier) of the default key."
          }
        }
      },
      "ConfigUrlsRequest": {
        "type": "object",
        "properties": {
          "crl_distribution_points": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the CRL distribution points attribute. See also RFC 5280 Section 4.2.1.13.",
            "items": {
              "type": "string"
            }
          },
          "enable_templating": {
            "type": "boolean",
            "description": "Whether or not to enabling templating of the above AIA fields. When templating is enabled the special values '{{issuer_id}}', '{{cluster_path}}', and '{{cluster_aia_path}}' are available, but the addresses are not checked for URI validity until issuance time. Using '{{cluster_path}}' requires /config/cluster's 'path' member to be set on all PR Secondary clusters and using '{{cluster_aia_path}}' requires /config/cluster's 'aia_path' member to be set on all PR secondary clusters.",
            "default": false
          },
          "issuing_certificates": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the issuing certificate attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "ocsp_servers": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the OCSP servers attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IntermediateCrossSignRequest": {
        "type": "object",
        "properties": {
          "add_basic_constraints": {
            "type": "boolean",
            "description": "Whether to add a Basic Constraints extension with CA: true. Only needed as a workaround in some compatibility scenarios with Active Directory Certificate Services."
          },
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "exported": {
            "type": "string",
            "description": "Must be \"internal\", \"exported\" or \"kms\". If set to \"exported\", the generated private key will be returned. This is your *only* chance to retrieve the private key!",
            "enum": [
              "internal",
              "external",
              "kms"
            ]
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "key_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing key, the name must be unique across all keys and not be the reserved value 'default'"
          },
          "key_ref": {
            "type": "string",
            "description": "Reference to a existing key; either \"default\" for the configured default key, an identifier or the name assigned to the key.",
            "default": "default"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          }
        }
      },
      "IntermediateGenerateRequest": {
        "type": "object",
        "properties": {
          "add_basic_constraints": {
            "type": "boolean",
            "description": "Whether to add a Basic Constraints extension with CA: true. Only needed as a workaround in some compatibility scenarios with Active Directory Certificate Services."
          },
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "key_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing key, the name must be unique across all keys and not be the reserved value 'default'"
          },
          "key_ref": {
            "type": "string",
            "description": "Reference to a existing key; either \"default\" for the configured default key, an identifier or the name assigned to the key.",
            "default": "default"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          }
        }
      },
      "IntermediateSetSignedRequest": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM-format certificate. This must be a CA certificate with a public key matching the previously-generated key from the generation endpoint. Additional parent CAs may be optionally appended to the bundle."
          }
        }
      },
      "IssueRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. If email protection is enabled for the role, this may contain email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If email protection is enabled in the role, this may be an email address."
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_ref": {
            "type": "string",
            "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
            "default": "default"
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "remove_roots_from_chain": {
            "type": "boolean",
            "description": "Whether or not to remove self-signed CA certificates in the output of the ca_chain field.",
            "default": false
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the role max TTL.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "user_ids": {
            "type": "array",
            "description": "The requested user_ids value to place in the subject, if any, in a comma-delimited list. Restricted by allowed_user_ids. Any values are added with OID 0.9.2342.19200300.100.1.1.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "User ID(s)"
            }
          }
        }
      },
      "IssuerDerRequest": {
        "type": "object",
        "properties": {
          "crl_distribution_points": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the CRL distribution points attribute. See also RFC 5280 Section 4.2.1.13.",
            "items": {
              "type": "string"
            }
          },
          "enable_aia_url_templating": {
            "type": "boolean",
            "description": "Whether or not to enabling templating of the above AIA fields. When templating is enabled the special values '{{issuer_id}}', '{{cluster_path}}', '{{cluster_aia_path}}' are available, but the addresses are not checked for URL validity until issuance time. Using '{{cluster_path}}' requires /config/cluster's 'path' member to be set on all PR Secondary clusters and using '{{cluster_aia_path}}' requires /config/cluster's 'aia_path' member to be set on all PR secondary clusters.",
            "default": false
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "issuing_certificates": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the issuing certificate attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "leaf_not_after_behavior": {
            "type": "string",
            "description": "Behavior of leaf's NotAfter fields: \"err\" to error if the computed NotAfter date exceeds that of this issuer; \"truncate\" to silently truncate to that of this issuer; or \"permit\" to allow this issuance to succeed (with NotAfter exceeding that of an issuer). Note that not all values will results in certificates that can be validated through the entire validity period. It is suggested to use \"truncate\" for intermediate CAs and \"permit\" only for root CAs.",
            "default": "err"
          },
          "manual_chain": {
            "type": "array",
            "description": "Chain of issuer references to use to build this issuer's computed CAChain field, when non-empty.",
            "items": {
              "type": "string"
            }
          },
          "ocsp_servers": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the OCSP servers attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "revocation_signature_algorithm": {
            "type": "string",
            "description": "Which x509.SignatureAlgorithm name to use for signing CRLs. This parameter allows differentiation between PKCS#1v1.5 and PSS keys and choice of signature hash algorithm. The default (empty string) value is for Go to select the signature algorithm. This can fail if the underlying key does not support the requested signature algorithm, which may not be known at modification time (such as with PKCS#11 managed RSA keys).",
            "default": ""
          },
          "usage": {
            "type": "array",
            "description": "Comma-separated list (or string slice) of usages for this issuer; valid values are \"read-only\", \"issuing-certificates\", \"crl-signing\", and \"ocsp-signing\". Multiple values may be specified. Read-only is implicit and always set.",
            "items": {
              "type": "string"
            },
            "default": [
              "read-only",
              "issuing-certificates",
              "crl-signing",
              "ocsp-signing"
            ]
          }
        }
      },
      "IssuerIssueRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. If email protection is enabled for the role, this may contain email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If email protection is enabled in the role, this may be an email address."
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "remove_roots_from_chain": {
            "type": "boolean",
            "description": "Whether or not to remove self-signed CA certificates in the output of the ca_chain field.",
            "default": false
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the role max TTL.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "user_ids": {
            "type": "array",
            "description": "The requested user_ids value to place in the subject, if any, in a comma-delimited list. Restricted by allowed_user_ids. Any values are added with OID 0.9.2342.19200300.100.1.1.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "User ID(s)"
            }
          }
        }
      },
      "IssuerJsonRequest": {
        "type": "object",
        "properties": {
          "crl_distribution_points": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the CRL distribution points attribute. See also RFC 5280 Section 4.2.1.13.",
            "items": {
              "type": "string"
            }
          },
          "enable_aia_url_templating": {
            "type": "boolean",
            "description": "Whether or not to enabling templating of the above AIA fields. When templating is enabled the special values '{{issuer_id}}', '{{cluster_path}}', '{{cluster_aia_path}}' are available, but the addresses are not checked for URL validity until issuance time. Using '{{cluster_path}}' requires /config/cluster's 'path' member to be set on all PR Secondary clusters and using '{{cluster_aia_path}}' requires /config/cluster's 'aia_path' member to be set on all PR secondary clusters.",
            "default": false
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "issuing_certificates": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the issuing certificate attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "leaf_not_after_behavior": {
            "type": "string",
            "description": "Behavior of leaf's NotAfter fields: \"err\" to error if the computed NotAfter date exceeds that of this issuer; \"truncate\" to silently truncate to that of this issuer; or \"permit\" to allow this issuance to succeed (with NotAfter exceeding that of an issuer). Note that not all values will results in certificates that can be validated through the entire validity period. It is suggested to use \"truncate\" for intermediate CAs and \"permit\" only for root CAs.",
            "default": "err"
          },
          "manual_chain": {
            "type": "array",
            "description": "Chain of issuer references to use to build this issuer's computed CAChain field, when non-empty.",
            "items": {
              "type": "string"
            }
          },
          "ocsp_servers": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the OCSP servers attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "revocation_signature_algorithm": {
            "type": "string",
            "description": "Which x509.SignatureAlgorithm name to use for signing CRLs. This parameter allows differentiation between PKCS#1v1.5 and PSS keys and choice of signature hash algorithm. The default (empty string) value is for Go to select the signature algorithm. This can fail if the underlying key does not support the requested signature algorithm, which may not be known at modification time (such as with PKCS#11 managed RSA keys).",
            "default": ""
          },
          "usage": {
            "type": "array",
            "description": "Comma-separated list (or string slice) of usages for this issuer; valid values are \"read-only\", \"issuing-certificates\", \"crl-signing\", and \"ocsp-signing\". Multiple values may be specified. Read-only is implicit and always set.",
            "items": {
              "type": "string"
            },
            "default": [
              "read-only",
              "issuing-certificates",
              "crl-signing",
              "ocsp-signing"
            ]
          }
        }
      },
      "IssuerPemRequest": {
        "type": "object",
        "properties": {
          "crl_distribution_points": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the CRL distribution points attribute. See also RFC 5280 Section 4.2.1.13.",
            "items": {
              "type": "string"
            }
          },
          "enable_aia_url_templating": {
            "type": "boolean",
            "description": "Whether or not to enabling templating of the above AIA fields. When templating is enabled the special values '{{issuer_id}}', '{{cluster_path}}', '{{cluster_aia_path}}' are available, but the addresses are not checked for URL validity until issuance time. Using '{{cluster_path}}' requires /config/cluster's 'path' member to be set on all PR Secondary clusters and using '{{cluster_aia_path}}' requires /config/cluster's 'aia_path' member to be set on all PR secondary clusters.",
            "default": false
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "issuing_certificates": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the issuing certificate attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "leaf_not_after_behavior": {
            "type": "string",
            "description": "Behavior of leaf's NotAfter fields: \"err\" to error if the computed NotAfter date exceeds that of this issuer; \"truncate\" to silently truncate to that of this issuer; or \"permit\" to allow this issuance to succeed (with NotAfter exceeding that of an issuer). Note that not all values will results in certificates that can be validated through the entire validity period. It is suggested to use \"truncate\" for intermediate CAs and \"permit\" only for root CAs.",
            "default": "err"
          },
          "manual_chain": {
            "type": "array",
            "description": "Chain of issuer references to use to build this issuer's computed CAChain field, when non-empty.",
            "items": {
              "type": "string"
            }
          },
          "ocsp_servers": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the OCSP servers attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "revocation_signature_algorithm": {
            "type": "string",
            "description": "Which x509.SignatureAlgorithm name to use for signing CRLs. This parameter allows differentiation between PKCS#1v1.5 and PSS keys and choice of signature hash algorithm. The default (empty string) value is for Go to select the signature algorithm. This can fail if the underlying key does not support the requested signature algorithm, which may not be known at modification time (such as with PKCS#11 managed RSA keys).",
            "default": ""
          },
          "usage": {
            "type": "array",
            "description": "Comma-separated list (or string slice) of usages for this issuer; valid values are \"read-only\", \"issuing-certificates\", \"crl-signing\", and \"ocsp-signing\". Multiple values may be specified. Read-only is implicit and always set.",
            "items": {
              "type": "string"
            },
            "default": [
              "read-only",
              "issuing-certificates",
              "crl-signing",
              "ocsp-signing"
            ]
          }
        }
      },
      "IssuerRequest": {
        "type": "object",
        "properties": {
          "crl_distribution_points": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the CRL distribution points attribute. See also RFC 5280 Section 4.2.1.13.",
            "items": {
              "type": "string"
            }
          },
          "enable_aia_url_templating": {
            "type": "boolean",
            "description": "Whether or not to enabling templating of the above AIA fields. When templating is enabled the special values '{{issuer_id}}', '{{cluster_path}}', '{{cluster_aia_path}}' are available, but the addresses are not checked for URL validity until issuance time. Using '{{cluster_path}}' requires /config/cluster's 'path' member to be set on all PR Secondary clusters and using '{{cluster_aia_path}}' requires /config/cluster's 'aia_path' member to be set on all PR secondary clusters.",
            "default": false
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "issuing_certificates": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the issuing certificate attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "leaf_not_after_behavior": {
            "type": "string",
            "description": "Behavior of leaf's NotAfter fields: \"err\" to error if the computed NotAfter date exceeds that of this issuer; \"truncate\" to silently truncate to that of this issuer; or \"permit\" to allow this issuance to succeed (with NotAfter exceeding that of an issuer). Note that not all values will results in certificates that can be validated through the entire validity period. It is suggested to use \"truncate\" for intermediate CAs and \"permit\" only for root CAs.",
            "default": "err"
          },
          "manual_chain": {
            "type": "array",
            "description": "Chain of issuer references to use to build this issuer's computed CAChain field, when non-empty.",
            "items": {
              "type": "string"
            }
          },
          "ocsp_servers": {
            "type": "array",
            "description": "Comma-separated list of URLs to be used for the OCSP servers attribute. See also RFC 5280 Section 4.2.2.1.",
            "items": {
              "type": "string"
            }
          },
          "revocation_signature_algorithm": {
            "type": "string",
            "description": "Which x509.SignatureAlgorithm name to use for signing CRLs. This parameter allows differentiation between PKCS#1v1.5 and PSS keys and choice of signature hash algorithm. The default (empty string) value is for Go to select the signature algorithm. This can fail if the underlying key does not support the requested signature algorithm, which may not be known at modification time (such as with PKCS#11 managed RSA keys).",
            "default": ""
          },
          "usage": {
            "type": "array",
            "description": "Comma-separated list (or string slice) of usages for this issuer; valid values are \"read-only\", \"issuing-certificates\", \"crl-signing\", and \"ocsp-signing\". Multiple values may be specified. Read-only is implicit and always set.",
            "items": {
              "type": "string"
            },
            "default": [
              "read-only",
              "issuing-certificates",
              "crl-signing",
              "ocsp-signing"
            ]
          }
        }
      },
      "IssuerResignCrlsRequest": {
        "type": "object",
        "properties": {
          "crl_number": {
            "type": "integer",
            "description": "The sequence number to be written within the CRL Number extension."
          },
          "crls": {
            "type": "array",
            "description": "A list of PEM encoded CRLs to combine, originally signed by the requested issuer.",
            "items": {
              "type": "string"
            }
          },
          "delta_crl_base_number": {
            "type": "integer",
            "description": "Using a zero or greater value specifies the base CRL revision number to encode within a Delta CRL indicator extension, otherwise the extension will not be added.",
            "default": -1
          },
          "format": {
            "type": "string",
            "description": "The format of the combined CRL, can be \"pem\" or \"der\". If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "default": "pem"
          },
          "next_update": {
            "type": "string",
            "description": "The amount of time the generated CRL should be valid; defaults to 72 hours.",
            "default": "72h"
          }
        }
      },
      "IssuerSignIntermediateRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "csr": {
            "type": "string",
            "description": "PEM-format CSR to be signed.",
            "default": ""
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "max_path_length": {
            "type": "integer",
            "description": "The maximum allowable path length",
            "default": -1
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "permitted_dns_domains": {
            "type": "array",
            "description": "Domains for which this certificate is allowed to sign or issue child certificates. If set, all DNS names (subject and alt) on child certs must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Permitted DNS Domains"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "skid": {
            "type": "string",
            "description": "Value for the Subject Key Identifier field (RFC 5280 Section 4.2.1.2). This value should ONLY be used when cross-signing to mimic the existing certificate's SKID value; this is necessary to allow certain TLS implementations (such as OpenSSL) which use SKID/AKID matches in chain building to restrict possible valid chains. Specified as a string in hex format. Default is empty, allowing Vault to automatically calculate the SKID according to method one in the above RFC section.",
            "default": "",
            "x-vault-displayAttrs": {
              "value": ""
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "use_csr_values": {
            "type": "boolean",
            "description": "If true, then: 1) Subject information, including names and alternate names, will be preserved from the CSR rather than using values provided in the other parameters to this path; 2) Any key usages requested in the CSR will be added to the basic set of key usages used for CA certs signed by this path; for instance, the non-repudiation flag; 3) Extensions requested in the CSR will be copied into the issued certificate.",
            "default": false
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          }
        }
      },
      "IssuerSignRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. If email protection is enabled for the role, this may contain email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If email protection is enabled in the role, this may be an email address."
          },
          "csr": {
            "type": "string",
            "description": "PEM-format CSR to be signed.",
            "default": ""
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "remove_roots_from_chain": {
            "type": "boolean",
            "description": "Whether or not to remove self-signed CA certificates in the output of the ca_chain field.",
            "default": false
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the role max TTL.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "user_ids": {
            "type": "array",
            "description": "The requested user_ids value to place in the subject, if any, in a comma-delimited list. Restricted by allowed_user_ids. Any values are added with OID 0.9.2342.19200300.100.1.1.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "User ID(s)"
            }
          }
        }
      },
      "IssuerSignRevocationListRequest": {
        "type": "object",
        "properties": {
          "crl_number": {
            "type": "integer",
            "description": "The sequence number to be written within the CRL Number extension."
          },
          "delta_crl_base_number": {
            "type": "integer",
            "description": "Using a zero or greater value specifies the base CRL revision number to encode within a Delta CRL indicator extension, otherwise the extension will not be added.",
            "default": -1
          },
          "extensions": {
            "type": "array",
            "description": "A list of maps containing extensions with keys id (string), critical (bool), value (string)",
            "items": {
              "type": "object"
            }
          },
          "format": {
            "type": "string",
            "description": "The format of the combined CRL, can be \"pem\" or \"der\". If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "default": "pem"
          },
          "next_update": {
            "type": "string",
            "description": "The amount of time the generated CRL should be valid; defaults to 72 hours.",
            "default": "72h"
          },
          "revoked_certs": {
            "type": "array",
            "description": "A list of maps containing the keys serial_number (string), revocation_time (string), and extensions (map with keys id (string), critical (bool), value (string))",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "IssuerSignSelfIssuedRequest": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM-format self-issued certificate to be signed."
          },
          "require_matching_certificate_algorithms": {
            "type": "boolean",
            "description": "If true, require the public key algorithm of the signer to match that of the self issued certificate.",
            "default": false
          }
        }
      },
      "IssuerSignVerbatimRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. If email protection is enabled for the role, this may contain email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If email protection is enabled in the role, this may be an email address."
          },
          "csr": {
            "type": "string",
            "description": "PEM-format CSR to be signed. Values will be taken verbatim from the CSR, except for basic constraints.",
            "default": ""
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "ext_key_usage": {
            "type": "array",
            "description": "A comma-separated string or list of extended key usages. Valid values can be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage -- simply drop the \"ExtKeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list.",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "ext_key_usage_oids": {
            "type": "array",
            "description": "A comma-separated string or list of extended key usage oids.",
            "items": {
              "type": "string"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "key_usage": {
            "type": "array",
            "description": "A comma-separated string or list of key usages (not extended key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage -- simply drop the \"KeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list.",
            "items": {
              "type": "string"
            },
            "default": [
              "DigitalSignature",
              "KeyAgreement",
              "KeyEncipherment"
            ]
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "remove_roots_from_chain": {
            "type": "boolean",
            "description": "Whether or not to remove self-signed CA certificates in the output of the ca_chain field.",
            "default": false
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the role max TTL.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          },
          "user_ids": {
            "type": "array",
            "description": "The requested user_ids value to place in the subject, if any, in a comma-delimited list. Restricted by allowed_user_ids. Any values are added with OID 0.9.2342.19200300.100.1.1.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "User ID(s)"
            }
          }
        }
      },
      "IssuersGenerateIntermediateRequest": {
        "type": "object",
        "properties": {
          "add_basic_constraints": {
            "type": "boolean",
            "description": "Whether to add a Basic Constraints extension with CA: true. Only needed as a workaround in some compatibility scenarios with Active Directory Certificate Services."
          },
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "key_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing key, the name must be unique across all keys and not be the reserved value 'default'"
          },
          "key_ref": {
            "type": "string",
            "description": "Reference to a existing key; either \"default\" for the configured default key, an identifier or the name assigned to the key.",
            "default": "default"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          }
        }
      },
      "IssuersGenerateRootRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "key_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing key, the name must be unique across all keys and not be the reserved value 'default'"
          },
          "key_ref": {
            "type": "string",
            "description": "Reference to a existing key; either \"default\" for the configured default key, an identifier or the name assigned to the key.",
            "default": "default"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          },
          "max_path_length": {
            "type": "integer",
            "description": "The maximum allowable path length",
            "default": -1
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "permitted_dns_domains": {
            "type": "array",
            "description": "Domains for which this certificate is allowed to sign or issue child certificates. If set, all DNS names (subject and alt) on child certs must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Permitted DNS Domains"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          }
        }
      },
      "IssuersImportBundleRequest": {
        "type": "object",
        "properties": {
          "pem_bundle": {
            "type": "string",
            "description": "PEM-format, concatenated unencrypted secret-key (optional) and certificates."
          }
        }
      },
      "IssuersImportCertRequest": {
        "type": "object",
        "properties": {
          "pem_bundle": {
            "type": "string",
            "description": "PEM-format, concatenated unencrypted secret-key (optional) and certificates."
          }
        }
      },
      "KeyRequest": {
        "type": "object",
        "properties": {
          "key_name": {
            "type": "string",
            "description": "Human-readable name for this key."
          }
        }
      },
      "KeysGenerateExportedRequest": {
        "type": "object",
        "properties": {
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0
          },
          "key_name": {
            "type": "string",
            "description": "Optional name to be used for this key"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          }
        }
      },
      "KeysGenerateInternalRequest": {
        "type": "object",
        "properties": {
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0
          },
          "key_name": {
            "type": "string",
            "description": "Optional name to be used for this key"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          }
        }
      },
      "KeysGenerateKmsRequest": {
        "type": "object",
        "properties": {
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0
          },
          "key_name": {
            "type": "string",
            "description": "Optional name to be used for this key"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          }
        }
      },
      "KeysImportRequest": {
        "type": "object",
        "properties": {
          "key_name": {
            "type": "string",
            "description": "Optional name to be used for this key"
          },
          "pem_bundle": {
            "type": "string",
            "description": "PEM-format, unencrypted secret key"
          }
        }
      },
      "RevokeRequest": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "Certificate to revoke in PEM format; must be signed by an issuer in this mount."
          },
          "serial_number": {
            "type": "string",
            "description": "Certificate serial number, in colon- or hyphen-separated octal"
          }
        }
      },
      "RevokeWithKeyRequest": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "Certificate to revoke in PEM format; must be signed by an issuer in this mount."
          },
          "private_key": {
            "type": "string",
            "description": "Key to use to verify revocation permission; must be in PEM format."
          },
          "serial_number": {
            "type": "string",
            "description": "Certificate serial number, in colon- or hyphen-separated octal"
          }
        }
      },
      "RolesRequest": {
        "type": "object",
        "properties": {
          "allow_any_name": {
            "type": "boolean",
            "description": "If set, clients can request certificates for any domain, regardless of allowed_domains restrictions. See the documentation for more information."
          },
          "allow_bare_domains": {
            "type": "boolean",
            "description": "If set, clients can request certificates for the base domains themselves, e.g. \"example.com\" of domains listed in allowed_domains. This is a separate option as in some cases this can be considered a security threat. See the documentation for more information."
          },
          "allow_glob_domains": {
            "type": "boolean",
            "description": "If set, domains specified in allowed_domains can include shell-style glob patterns, e.g. \"ftp*.example.com\". See the documentation for more information."
          },
          "allow_ip_sans": {
            "type": "boolean",
            "description": "If set, IP Subject Alternative Names are allowed. Any valid IP is accepted and No authorization checking is performed.",
            "default": true,
            "x-vault-displayAttrs": {
              "name": "Allow IP Subject Alternative Names",
              "value": true
            }
          },
          "allow_localhost": {
            "type": "boolean",
            "description": "Whether to allow \"localhost\" and \"localdomain\" as a valid common name in a request, independent of allowed_domains value.",
            "default": true,
            "x-vault-displayAttrs": {
              "value": true
            }
          },
          "allow_subdomains": {
            "type": "boolean",
            "description": "If set, clients can request certificates for subdomains of domains listed in allowed_domains, including wildcard subdomains. See the documentation for more information."
          },
          "allow_wildcard_certificates": {
            "type": "boolean",
            "description": "If set, allows certificates with wildcards in the common name to be issued, conforming to RFC 6125's Section 6.4.3; e.g., \"*.example.net\" or \"b*z.example.net\". See the documentation for more information.",
            "default": true
          },
          "allowed_domains": {
            "type": "array",
            "description": "Specifies the domains this role is allowed to issue certificates for. This is used with the allow_bare_domains, allow_subdomains, and allow_glob_domains to determine matches for the common name, DNS-typed SAN entries, and Email-typed SAN entries of certificates. See the documentation for more information. This parameter accepts a comma-separated string or list of domains.",
            "items": {
              "type": "string"
            }
          },
          "allowed_domains_template": {
            "type": "boolean",
            "description": "If set, Allowed domains can be specified using identity template policies. Non-templated domains are also permitted.",
            "default": false
          },
          "allowed_other_sans": {
            "type": "array",
            "description": "If set, an array of allowed other names to put in SANs. These values support globbing and must be in the format <oid>;<type>:<value>. Currently only \"utf8\" is a valid type. All values, including globbing values, must use this syntax, with the exception being a single \"*\" which allows any OID and any value (but type must still be utf8).",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Allowed Other Subject Alternative Names"
            }
          },
          "allowed_serial_numbers": {
            "type": "array",
            "description": "If set, an array of allowed serial numbers to put in Subject. These values support globbing.",
            "items": {
              "type": "string"
            }
          },
          "allowed_uri_sans": {
            "type": "array",
            "description": "If set, an array of allowed URIs for URI Subject Alternative Names. Any valid URI is accepted, these values support globbing.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Allowed URI Subject Alternative Names"
            }
          },
          "allowed_uri_sans_template": {
            "type": "boolean",
            "description": "If set, Allowed URI SANs can be specified using identity template policies. Non-templated URI SANs are also permitted.",
            "default": false
          },
          "allowed_user_ids": {
            "type": "array",
            "description": "If set, an array of allowed user-ids to put in user system login name specified here: https://www.rfc-editor.org/rfc/rfc1274#section-9.3.1",
            "items": {
              "type": "string"
            }
          },
          "backend": {
            "type": "string",
            "description": "Backend Type"
          },
          "basic_constraints_valid_for_non_ca": {
            "type": "boolean",
            "description": "Mark Basic Constraints valid when issuing non-CA certificates.",
            "x-vault-displayAttrs": {
              "name": "Basic Constraints Valid for Non-CA"
            }
          },
          "client_flag": {
            "type": "boolean",
            "description": "If set, certificates are flagged for client auth use. Defaults to true. See also RFC 5280 Section 4.2.1.12.",
            "default": true,
            "x-vault-displayAttrs": {
              "value": true
            }
          },
          "cn_validations": {
            "type": "array",
            "description": "List of allowed validations to run against the Common Name field. Values can include 'email' to validate the CN is a email address, 'hostname' to validate the CN is a valid hostname (potentially including wildcards). When multiple validations are specified, these take OR semantics (either email OR hostname are allowed). The special value 'disabled' allows disabling all CN name validations, allowing for arbitrary non-Hostname, non-Email address CNs.",
            "items": {
              "type": "string"
            },
            "default": [
              "email",
              "hostname"
            ],
            "x-vault-displayAttrs": {
              "name": "Common Name Validations"
            }
          },
          "code_signing_flag": {
            "type": "boolean",
            "description": "If set, certificates are flagged for code signing use. Defaults to false. See also RFC 5280 Section 4.2.1.12."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value in certificates issued by this role.",
            "items": {
              "type": "string"
            }
          },
          "email_protection_flag": {
            "type": "boolean",
            "description": "If set, certificates are flagged for email protection use. Defaults to false. See also RFC 5280 Section 4.2.1.12."
          },
          "enforce_hostnames": {
            "type": "boolean",
            "description": "If set, only valid host names are allowed for CN and DNS SANs, and the host part of email addresses. Defaults to true.",
            "default": true,
            "x-vault-displayAttrs": {
              "value": true
            }
          },
          "ext_key_usage": {
            "type": "array",
            "description": "A comma-separated string or list of extended key usages. Valid values can be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage -- simply drop the \"ExtKeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list. See also RFC 5280 Section 4.2.1.12.",
            "items": {
              "type": "string"
            },
            "default": [],
            "x-vault-displayAttrs": {
              "name": "Extended Key Usage"
            }
          },
          "ext_key_usage_oids": {
            "type": "array",
            "description": "A comma-separated string or list of extended key usage oids.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Extended Key Usage OIDs"
            }
          },
          "generate_lease": {
            "type": "boolean",
            "description": "If set, certificates issued/signed against this role will have Vault leases attached to them. Defaults to \"false\". Certificates can be added to the CRL by \"vault revoke <lease_id>\" when certificates are associated with leases. It can also be done using the \"pki/revoke\" endpoint. However, when lease generation is disabled, invoking \"pki/revoke\" would be the only way to add the certificates to the CRL. When large number of certificates are generated with long lifetimes, it is recommended that lease generation be disabled, as large amount of leases adversely affect the startup time of Vault."
          },
          "issuer_ref": {
            "type": "string",
            "description": "Reference to the issuer used to sign requests serviced by this role.",
            "default": "default"
          },
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\", \"ed25519\" and \"any\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519",
              "any"
            ],
            "default": "rsa"
          },
          "key_usage": {
            "type": "array",
            "description": "A comma-separated string or list of key usages (not extended key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage -- simply drop the \"KeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list. See also RFC 5280 Section 4.2.1.3.",
            "items": {
              "type": "string"
            },
            "default": [
              "DigitalSignature",
              "KeyAgreement",
              "KeyEncipherment"
            ],
            "x-vault-displayAttrs": {
              "value": "DigitalSignature,KeyAgreement,KeyEncipherment"
            }
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value in certificates issued by this role.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "max_ttl": {
            "type": "integer",
            "description": "The maximum allowed lease duration. If not set, defaults to the system maximum lease TTL.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Max TTL"
            }
          },
          "no_store": {
            "type": "boolean",
            "description": "If set, certificates issued/signed against this role will not be stored in the storage backend. This can improve performance when issuing large numbers of certificates. However, certificates issued in this way cannot be enumerated or revoked, so this option is recommended only for certificates that are non-sensitive, or extremely short-lived. This option implies a value of \"false\" for \"generate_lease\"."
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ."
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value in certificates issued by this role.",
            "items": {
              "type": "string"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value in certificates issued by this role.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Organizational Unit"
            }
          },
          "policy_identifiers": {
            "type": "array",
            "description": "A comma-separated string or list of policy OIDs, or a JSON list of qualified policy information, which must include an oid, and may include a notice and/or cps url, using the form [{\"oid\"=\"1.3.6.1.4.1.7.8\",\"notice\"=\"I am a user Notice\"}, {\"oid\"=\"1.3.6.1.4.1.44947.1.2.4 \",\"cps\"=\"https://example.com\"}].",
            "items": {
              "type": "string"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value in certificates issued by this role.",
            "items": {
              "type": "string"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value in certificates issued by this role.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "require_cn": {
            "type": "boolean",
            "description": "If set to false, makes the 'common_name' field optional while generating a certificate.",
            "default": true,
            "x-vault-displayAttrs": {
              "name": "Require Common Name"
            }
          },
          "server_flag": {
            "type": "boolean",
            "description": "If set, certificates are flagged for server auth use. Defaults to true. See also RFC 5280 Section 4.2.1.12.",
            "default": true,
            "x-vault-displayAttrs": {
              "value": true
            }
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value in certificates issued by this role.",
            "items": {
              "type": "string"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The lease duration (validity period of the certificate) if no specific lease duration is requested. The lease duration controls the expiration of certificates issued by this backend. Defaults to the system default value or the value of max_ttl, whichever is shorter.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "use_csr_common_name": {
            "type": "boolean",
            "description": "If set, when used with a signing profile, the common name in the CSR will be used. This does *not* include any requested Subject Alternative Names; use use_csr_sans for that. Defaults to true.",
            "default": true,
            "x-vault-displayAttrs": {
              "name": "Use CSR Common Name",
              "value": true
            }
          },
          "use_csr_sans": {
            "type": "boolean",
            "description": "If set, when used with a signing profile, the SANs in the CSR will be used. This does *not* include the Common Name (cn); use use_csr_common_name for that. Defaults to true.",
            "default": true,
            "x-vault-displayAttrs": {
              "name": "Use CSR Subject Alternative Names",
              "value": true
            }
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          }
        }
      },
      "RootGenerateRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "key_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing key, the name must be unique across all keys and not be the reserved value 'default'"
          },
          "key_ref": {
            "type": "string",
            "description": "Reference to a existing key; either \"default\" for the configured default key, an identifier or the name assigned to the key.",
            "default": "default"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          },
          "max_path_length": {
            "type": "integer",
            "description": "The maximum allowable path length",
            "default": -1
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "permitted_dns_domains": {
            "type": "array",
            "description": "Domains for which this certificate is allowed to sign or issue child certificates. If set, all DNS names (subject and alt) on child certs must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Permitted DNS Domains"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          }
        }
      },
      "RootReplaceRequest": {
        "type": "object",
        "properties": {
          "default": {
            "type": "string",
            "description": "Reference (name or identifier) to the default issuer.",
            "default": "next"
          }
        }
      },
      "RootRotateRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "key_bits": {
            "type": "integer",
            "description": "The number of bits to use. Allowed values are 0 (universal default); with rsa key_type: 2048 (default), 3072, or 4096; with ec key_type: 224, 256 (default), 384, or 521; ignored with ed25519.",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "key_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing key, the name must be unique across all keys and not be the reserved value 'default'"
          },
          "key_ref": {
            "type": "string",
            "description": "Reference to a existing key; either \"default\" for the configured default key, an identifier or the name assigned to the key.",
            "default": "default"
          },
          "key_type": {
            "type": "string",
            "description": "The type of key to use; defaults to RSA. \"rsa\" \"ec\" and \"ed25519\" are the only valid values.",
            "enum": [
              "rsa",
              "ec",
              "ed25519"
            ],
            "default": "rsa",
            "x-vault-displayAttrs": {
              "value": "rsa"
            }
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "managed_key_id": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_name is required. Ignored for other types."
          },
          "managed_key_name": {
            "type": "string",
            "description": "The name of the managed key to use when the exported type is kms. When kms type is the key type, this field or managed_key_id is required. Ignored for other types."
          },
          "max_path_length": {
            "type": "integer",
            "description": "The maximum allowable path length",
            "default": -1
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "permitted_dns_domains": {
            "type": "array",
            "description": "Domains for which this certificate is allowed to sign or issue child certificates. If set, all DNS names (subject and alt) on child certs must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Permitted DNS Domains"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          }
        }
      },
      "RootSignIntermediateRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. May contain both DNS names and email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If not specified when signing, the common name will be taken from the CSR; other names must still be specified in alt_names or ip_sans."
          },
          "country": {
            "type": "array",
            "description": "If set, Country will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "csr": {
            "type": "string",
            "description": "PEM-format CSR to be signed.",
            "default": ""
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_name": {
            "type": "string",
            "description": "Provide a name to the generated or existing issuer, the name must be unique across all issuers and not be the reserved value 'default'"
          },
          "issuer_ref": {
            "type": "string",
            "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
            "default": "default"
          },
          "locality": {
            "type": "array",
            "description": "If set, Locality will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Locality/City"
            }
          },
          "max_path_length": {
            "type": "integer",
            "description": "The maximum allowable path length",
            "default": -1
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "not_before_duration": {
            "type": "integer",
            "description": "The duration before now which the certificate needs to be backdated by.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "value": 30
            }
          },
          "organization": {
            "type": "array",
            "description": "If set, O (Organization) will be set to this value.",
            "items": {
              "type": "string"
            }
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "ou": {
            "type": "array",
            "description": "If set, OU (OrganizationalUnit) will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "OU (Organizational Unit)"
            }
          },
          "permitted_dns_domains": {
            "type": "array",
            "description": "Domains for which this certificate is allowed to sign or issue child certificates. If set, all DNS names (subject and alt) on child certs must be exact matches or subsets of the given domains (see https://tools.ietf.org/html/rfc5280#section-4.2.1.10).",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Permitted DNS Domains"
            }
          },
          "postal_code": {
            "type": "array",
            "description": "If set, Postal Code will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Postal Code"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "province": {
            "type": "array",
            "description": "If set, Province will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Province/State"
            }
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "skid": {
            "type": "string",
            "description": "Value for the Subject Key Identifier field (RFC 5280 Section 4.2.1.2). This value should ONLY be used when cross-signing to mimic the existing certificate's SKID value; this is necessary to allow certain TLS implementations (such as OpenSSL) which use SKID/AKID matches in chain building to restrict possible valid chains. Specified as a string in hex format. Default is empty, allowing Vault to automatically calculate the SKID according to method one in the above RFC section.",
            "default": "",
            "x-vault-displayAttrs": {
              "value": ""
            }
          },
          "street_address": {
            "type": "array",
            "description": "If set, Street Address will be set to this value.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Street Address"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the mount max TTL. Note: this only has an effect when generating a CA cert or signing a CA cert, not when generating a CSR for an intermediate CA.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "use_csr_values": {
            "type": "boolean",
            "description": "If true, then: 1) Subject information, including names and alternate names, will be preserved from the CSR rather than using values provided in the other parameters to this path; 2) Any key usages requested in the CSR will be added to the basic set of key usages used for CA certs signed by this path; for instance, the non-repudiation flag; 3) Extensions requested in the CSR will be copied into the issued certificate.",
            "default": false
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          }
        }
      },
      "RootSignSelfIssuedRequest": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "PEM-format self-issued certificate to be signed."
          },
          "issuer_ref": {
            "type": "string",
            "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
            "default": "default"
          },
          "require_matching_certificate_algorithms": {
            "type": "boolean",
            "description": "If true, require the public key algorithm of the signer to match that of the self issued certificate.",
            "default": false
          }
        }
      },
      "SignRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. If email protection is enabled for the role, this may contain email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If email protection is enabled in the role, this may be an email address."
          },
          "csr": {
            "type": "string",
            "description": "PEM-format CSR to be signed.",
            "default": ""
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_ref": {
            "type": "string",
            "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
            "default": "default"
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "remove_roots_from_chain": {
            "type": "boolean",
            "description": "Whether or not to remove self-signed CA certificates in the output of the ca_chain field.",
            "default": false
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the role max TTL.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "user_ids": {
            "type": "array",
            "description": "The requested user_ids value to place in the subject, if any, in a comma-delimited list. Restricted by allowed_user_ids. Any values are added with OID 0.9.2342.19200300.100.1.1.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "User ID(s)"
            }
          }
        }
      },
      "SignVerbatimRequest": {
        "type": "object",
        "properties": {
          "alt_names": {
            "type": "string",
            "description": "The requested Subject Alternative Names, if any, in a comma-delimited list. If email protection is enabled for the role, this may contain email addresses.",
            "x-vault-displayAttrs": {
              "name": "DNS/Email Subject Alternative Names (SANs)"
            }
          },
          "common_name": {
            "type": "string",
            "description": "The requested common name; if you want more than one, specify the alternative names in the alt_names map. If email protection is enabled in the role, this may be an email address."
          },
          "csr": {
            "type": "string",
            "description": "PEM-format CSR to be signed. Values will be taken verbatim from the CSR, except for basic constraints.",
            "default": ""
          },
          "exclude_cn_from_sans": {
            "type": "boolean",
            "description": "If true, the Common Name will not be included in DNS or Email Subject Alternate Names. Defaults to false (CN is included).",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Exclude Common Name from Subject Alternative Names (SANs)"
            }
          },
          "ext_key_usage": {
            "type": "array",
            "description": "A comma-separated string or list of extended key usages. Valid values can be found at https://golang.org/pkg/crypto/x509/#ExtKeyUsage -- simply drop the \"ExtKeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list.",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "ext_key_usage_oids": {
            "type": "array",
            "description": "A comma-separated string or list of extended key usage oids.",
            "items": {
              "type": "string"
            }
          },
          "format": {
            "type": "string",
            "description": "Format for returned data. Can be \"pem\", \"der\", or \"pem_bundle\". If \"pem_bundle\", any private key and issuing cert will be appended to the certificate pem. If \"der\", the value will be base64 encoded. Defaults to \"pem\".",
            "enum": [
              "pem",
              "der",
              "pem_bundle"
            ],
            "default": "pem",
            "x-vault-displayAttrs": {
              "value": "pem"
            }
          },
          "ip_sans": {
            "type": "array",
            "description": "The requested IP SANs, if any, in a comma-delimited list",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IP Subject Alternative Names (SANs)"
            }
          },
          "issuer_ref": {
            "type": "string",
            "description": "Reference to a existing issuer; either \"default\" for the configured default issuer, an identifier or the name assigned to the issuer.",
            "default": "default"
          },
          "key_usage": {
            "type": "array",
            "description": "A comma-separated string or list of key usages (not extended key usages). Valid values can be found at https://golang.org/pkg/crypto/x509/#KeyUsage -- simply drop the \"KeyUsage\" part of the name. To remove all key usages from being set, set this value to an empty list.",
            "items": {
              "type": "string"
            },
            "default": [
              "DigitalSignature",
              "KeyAgreement",
              "KeyEncipherment"
            ]
          },
          "not_after": {
            "type": "string",
            "description": "Set the not after field of the certificate with specified date value. The value format should be given in UTC format YYYY-MM-ddTHH:MM:SSZ"
          },
          "other_sans": {
            "type": "array",
            "description": "Requested other SANs, in an array with the format <oid>;UTF8:<utf8 string value> for each entry.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Other SANs"
            }
          },
          "private_key_format": {
            "type": "string",
            "description": "Format for the returned private key. Generally the default will be controlled by the \"format\" parameter as either base64-encoded DER or PEM-encoded DER. However, this can be set to \"pkcs8\" to have the returned private key contain base64-encoded pkcs8 or PEM-encoded pkcs8 instead. Defaults to \"der\".",
            "enum": [
              "",
              "der",
              "pem",
              "pkcs8"
            ],
            "default": "der",
            "x-vault-displayAttrs": {
              "value": "der"
            }
          },
          "remove_roots_from_chain": {
            "type": "boolean",
            "description": "Whether or not to remove self-signed CA certificates in the output of the ca_chain field.",
            "default": false
          },
          "serial_number": {
            "type": "string",
            "description": "The Subject's requested serial number, if any. See RFC 4519 Section 2.31 'serialNumber' for a description of this field. If you want more than one, specify alternative names in the alt_names map using OID 2.5.4.5. This has no impact on the final certificate's Serial Number field."
          },
          "signature_bits": {
            "type": "integer",
            "description": "The number of bits to use in the signature algorithm; accepts 256 for SHA-2-256, 384 for SHA-2-384, and 512 for SHA-2-512. Defaults to 0 to automatically detect based on key length (SHA-2-256 for RSA keys, and matching the curve size for NIST P-Curves).",
            "default": 0,
            "x-vault-displayAttrs": {
              "value": 0
            }
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be larger than the role max TTL.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          },
          "uri_sans": {
            "type": "array",
            "description": "The requested URI SANs, if any, in a comma-delimited list.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "URI Subject Alternative Names (SANs)"
            }
          },
          "use_pss": {
            "type": "boolean",
            "description": "Whether or not to use PSS signatures when using a RSA key-type issuer. Defaults to false.",
            "default": false
          },
          "user_ids": {
            "type": "array",
            "description": "The requested user_ids value to place in the subject, if any, in a comma-delimited list. Restricted by allowed_user_ids. Any values are added with OID 0.9.2342.19200300.100.1.1.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "User ID(s)"
            }
          }
        }
      },
      "TidyRequest": {
        "type": "object",
        "properties": {
          "issuer_safety_buffer": {
            "type": "integer",
            "description": "The amount of extra time that must have passed beyond issuer's expiration before it is removed from the backend storage. Defaults to 8760 hours (1 year).",
            "format": "seconds",
            "default": 31536000
          },
          "pause_duration": {
            "type": "string",
            "description": "The amount of time to wait between processing certificates. This allows operators to change the execution profile of tidy to take consume less resources by slowing down how long it takes to run. Note that the entire list of certificates will be stored in memory during the entire tidy operation, but resources to read/process/update existing entries will be spread out over a greater period of time. By default this is zero seconds.",
            "default": "0s"
          },
          "revocation_queue_safety_buffer": {
            "type": "integer",
            "description": "The amount of time that must pass from the cross-cluster revocation request being initiated to when it will be slated for removal. Setting this too low may remove valid revocation requests before the owning cluster has a chance to process them, especially if the cluster is offline.",
            "format": "seconds",
            "default": 172800
          },
          "safety_buffer": {
            "type": "integer",
            "description": "The amount of extra time that must have passed beyond certificate expiration before it is removed from the backend storage and/or revocation list. Defaults to 72 hours.",
            "format": "seconds",
            "default": 259200
          },
          "tidy_cert_store": {
            "type": "boolean",
            "description": "Set to true to enable tidying up the certificate store"
          },
          "tidy_cross_cluster_revoked_certs": {
            "type": "boolean",
            "description": "Set to true to enable tidying up the cross-cluster revoked certificate store. Only runs on the active primary node."
          },
          "tidy_expired_issuers": {
            "type": "boolean",
            "description": "Set to true to automatically remove expired issuers past the issuer_safety_buffer. No keys will be removed as part of this operation."
          },
          "tidy_move_legacy_ca_bundle": {
            "type": "boolean",
            "description": "Set to true to move the legacy ca_bundle from /config/ca_bundle to /config/ca_bundle.bak. This prevents downgrades to pre-Vault 1.11 versions (as older PKI engines do not know about the new multi-issuer storage layout), but improves the performance on seal wrapped PKI mounts. This will only occur if at least issuer_safety_buffer time has occurred after the initial storage migration. This backup is saved in case of an issue in future migrations. Operators may consider removing it via sys/raw if they desire. The backup will be removed via a DELETE /root call, but note that this removes ALL issuers within the mount (and is thus not desirable in most operational scenarios)."
          },
          "tidy_revocation_list": {
            "type": "boolean",
            "description": "Deprecated; synonym for 'tidy_revoked_certs"
          },
          "tidy_revocation_queue": {
            "type": "boolean",
            "description": "Set to true to remove stale revocation queue entries that haven't been confirmed by any active cluster. Only runs on the active primary node",
            "default": false
          },
          "tidy_revoked_cert_issuer_associations": {
            "type": "boolean",
            "description": "Set to true to validate issuer associations on revocation entries. This helps increase the performance of CRL building and OCSP responses."
          },
          "tidy_revoked_certs": {
            "type": "boolean",
            "description": "Set to true to expire all revoked and expired certificates, removing them both from the CRL and from storage. The CRL will be rotated if this causes any values to be removed."
          }
        }
      }
    }
  }
}
