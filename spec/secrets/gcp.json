{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/config": {
      "description": "Configure the GCP backend.",
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/rotate-root": {
      "description": "Request to rotate the GCP credentials used by Vault",
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/impersonated-account": {
      "description": "List created impersonated accounts.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/impersonated-account/{name}": {
      "description": "Register and manage a GCP service account to generate credentials under",
      "parameters": [
        {
          "name": "name",
          "description": "Required. Name to refer to this impersonated account in Vault. Cannot be updated.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpersonatedAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/impersonated-account/{name}/token": {
      "description": "Generate an OAuth2 access token secret.",
      "parameters": [
        {
          "name": "name",
          "description": "Required. Name of the impersonated account.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/impersonated-accounts": {
      "description": "List created impersonated accounts.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/key/{roleset}": {
      "description": "Generate a service account private key secret.",
      "parameters": [
        {
          "name": "roleset",
          "description": "Required. Name of the role set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roleset": {
      "description": "List existing rolesets.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roleset/{name}": {
      "description": "Read/write sets of IAM roles to be given to generated credentials for specified GCP resources.",
      "parameters": [
        {
          "name": "name",
          "description": "Required. Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/roleset/{name}/rotate": {
      "description": "Rotates or recreates the service account bound to a roleset.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roleset/{name}/rotate-key": {
      "description": "Rotate the service account key used to generate access tokens for a roleset.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roleset/{roleset}/key": {
      "description": "Generate a service account private key secret.",
      "parameters": [
        {
          "name": "roleset",
          "description": "Required. Name of the role set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesetKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roleset/{roleset}/token": {
      "description": "Generate an OAuth2 access token secret.",
      "parameters": [
        {
          "name": "roleset",
          "description": "Required. Name of the role set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rolesets": {
      "description": "List existing rolesets.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-account": {
      "description": "List created static accounts.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-account/{name}": {
      "description": "Register and manage a GCP service account to generate credentials under",
      "parameters": [
        {
          "name": "name",
          "description": "Required. Name to refer to this static account in Vault. Cannot be updated.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/static-account/{name}/key": {
      "description": "Generate a service account private key secret.",
      "parameters": [
        {
          "name": "name",
          "description": "Required. Name of the static account.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaticAccountKeyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-account/{name}/rotate-key": {
      "description": "Rotate the key used to generate access tokens for a static account",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the account.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-account/{name}/token": {
      "description": "Generate an OAuth2 access token secret.",
      "parameters": [
        {
          "name": "name",
          "description": "Required. Name of the static account.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/static-accounts": {
      "description": "List created static accounts.",
      "get": {
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/token/{roleset}": {
      "description": "Generate an OAuth2 access token secret.",
      "parameters": [
        {
          "name": "roleset",
          "description": "Required. Name of the role set.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigRequest": {
        "type": "object",
        "properties": {
          "credentials": {
            "type": "string",
            "description": "GCP IAM service account credentials JSON with permissions to create new service accounts and set IAM policies"
          },
          "max_ttl": {
            "type": "integer",
            "description": "Maximum time a service account key is valid for. If <= 0, will use system default.",
            "format": "seconds"
          },
          "ttl": {
            "type": "integer",
            "description": "Default lease for generated keys. If <= 0, will use system default.",
            "format": "seconds"
          }
        }
      },
      "ImpersonatedAccountRequest": {
        "type": "object",
        "properties": {
          "service_account_email": {
            "type": "string",
            "description": "Required. Email of the GCP service account to manage. Cannot be updated."
          },
          "token_scopes": {
            "type": "array",
            "description": "List of OAuth scopes to assign to access tokens generated under this account.",
            "items": {
              "type": "string"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "Lifetime of the token for the impersonated account.",
            "format": "seconds"
          }
        }
      },
      "KeyRequest": {
        "type": "object",
        "properties": {
          "key_algorithm": {
            "type": "string",
            "description": "Private key algorithm for service account key - defaults to KEY_ALG_RSA_2048\"",
            "default": "KEY_ALG_RSA_2048"
          },
          "key_type": {
            "type": "string",
            "description": "Private key type for service account key - defaults to TYPE_GOOGLE_CREDENTIALS_FILE\"",
            "default": "TYPE_GOOGLE_CREDENTIALS_FILE"
          },
          "ttl": {
            "type": "integer",
            "description": "Lifetime of the service account key",
            "format": "seconds"
          }
        }
      },
      "RolesetKeyRequest": {
        "type": "object",
        "properties": {
          "key_algorithm": {
            "type": "string",
            "description": "Private key algorithm for service account key - defaults to KEY_ALG_RSA_2048\"",
            "default": "KEY_ALG_RSA_2048"
          },
          "key_type": {
            "type": "string",
            "description": "Private key type for service account key - defaults to TYPE_GOOGLE_CREDENTIALS_FILE\"",
            "default": "TYPE_GOOGLE_CREDENTIALS_FILE"
          },
          "ttl": {
            "type": "integer",
            "description": "Lifetime of the service account key",
            "format": "seconds"
          }
        }
      },
      "RolesetRequest": {
        "type": "object",
        "properties": {
          "bindings": {
            "type": "string",
            "description": "Bindings configuration string."
          },
          "project": {
            "type": "string",
            "description": "Name of the GCP project that this roleset's service account will belong to."
          },
          "secret_type": {
            "type": "string",
            "description": "Type of secret generated for this role set. Defaults to 'access_token'",
            "default": "access_token"
          },
          "token_scopes": {
            "type": "array",
            "description": "List of OAuth scopes to assign to credentials generated under this role set",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "StaticAccountKeyRequest": {
        "type": "object",
        "properties": {
          "key_algorithm": {
            "type": "string",
            "description": "Private key algorithm for service account key. Defaults to KEY_ALG_RSA_2048.\"",
            "default": "KEY_ALG_RSA_2048"
          },
          "key_type": {
            "type": "string",
            "description": "Private key type for service account key. Defaults to TYPE_GOOGLE_CREDENTIALS_FILE.\"",
            "default": "TYPE_GOOGLE_CREDENTIALS_FILE"
          },
          "ttl": {
            "type": "integer",
            "description": "Lifetime of the service account key",
            "format": "seconds"
          }
        }
      },
      "StaticAccountRequest": {
        "type": "object",
        "properties": {
          "bindings": {
            "type": "string",
            "description": "Bindings configuration string."
          },
          "secret_type": {
            "type": "string",
            "description": "Type of secret generated for this account. Cannot be updated. Defaults to \"access_token\"",
            "default": "access_token"
          },
          "service_account_email": {
            "type": "string",
            "description": "Required. Email of the GCP service account to manage. Cannot be updated."
          },
          "token_scopes": {
            "type": "array",
            "description": "List of OAuth scopes to assign to access tokens generated under this account. Ignored if \"secret_type\" is not \"\"access_token\"\"",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
