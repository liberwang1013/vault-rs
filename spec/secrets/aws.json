{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/config/lease": {
      "description": "Configure the default lease information for generated credentials.",
      "get": {
        "summary": "Configure the default lease information for generated credentials.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configure the default lease information for generated credentials.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigLeaseRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/root": {
      "description": "Configure the root credentials that are used to manage IAM.",
      "get": {
        "summary": "Configure the root credentials that are used to manage IAM.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configure the root credentials that are used to manage IAM.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRootRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/config/rotate-root": {
      "description": "Request to rotate the AWS credentials used by Vault",
      "post": {
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/creds/{name}": {
      "description": "Generate AWS credentials from a specific Vault role.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Generate AWS credentials from a specific Vault role.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Generate AWS credentials from a specific Vault role.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles": {
      "description": "List the existing roles in this backend",
      "get": {
        "summary": "List the existing roles in this backend",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles/{name}": {
      "description": "Read, write and reference IAM policies that access keys can be made for.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the policy",
          "in": "path",
          "schema": {
            "type": "string",
            "x-vault-displayAttrs": {
              "name": "Policy Name"
            }
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Read, write and reference IAM policies that access keys can be made for.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Read, write and reference IAM policies that access keys can be made for.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Read, write and reference IAM policies that access keys can be made for.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sts/{name}": {
      "description": "Generate AWS credentials from a specific Vault role.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Generate AWS credentials from a specific Vault role.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Generate AWS credentials from a specific Vault role.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigLeaseRequest": {
        "type": "object",
        "properties": {
          "lease": {
            "type": "string",
            "description": "Default lease for roles."
          },
          "lease_max": {
            "type": "string",
            "description": "Maximum time a credential is valid for."
          }
        }
      },
      "ConfigRootRequest": {
        "type": "object",
        "properties": {
          "access_key": {
            "type": "string",
            "description": "Access key with permission to create new keys."
          },
          "iam_endpoint": {
            "type": "string",
            "description": "Endpoint to custom IAM server URL"
          },
          "max_retries": {
            "type": "integer",
            "description": "Maximum number of retries for recoverable exceptions of AWS APIs",
            "default": -1
          },
          "region": {
            "type": "string",
            "description": "Region for API calls."
          },
          "secret_key": {
            "type": "string",
            "description": "Secret key with permission to create new keys."
          },
          "sts_endpoint": {
            "type": "string",
            "description": "Endpoint to custom STS server URL"
          },
          "username_template": {
            "type": "string",
            "description": "Template to generate custom IAM usernames"
          }
        }
      },
      "CredsRequest": {
        "type": "object",
        "properties": {
          "role_arn": {
            "type": "string",
            "description": "ARN of role to assume when credential_type is assumed_role"
          },
          "role_session_name": {
            "type": "string",
            "description": "Session name to use when assuming role. Max chars: 64"
          },
          "ttl": {
            "type": "integer",
            "description": "Lifetime of the returned credentials in seconds",
            "format": "seconds",
            "default": 3600
          }
        }
      },
      "RolesRequest": {
        "type": "object",
        "properties": {
          "arn": {
            "type": "string",
            "description": "Use role_arns or policy_arns instead.",
            "deprecated": true
          },
          "credential_type": {
            "type": "string",
            "description": "Type of credential to retrieve. Must be one of assumed_role, iam_user, or federation_token"
          },
          "default_sts_ttl": {
            "type": "integer",
            "description": "Default TTL for assumed_role and federation_token credential types when no TTL is explicitly requested with the credentials",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Default STS TTL"
            }
          },
          "iam_groups": {
            "type": "array",
            "description": "Names of IAM groups that generated IAM users will be added to. For a credential type of assumed_role or federation_token, the policies sent to the corresponding AWS call (sts:AssumeRole or sts:GetFederation) will be the policies from each group in iam_groups combined with the policy_document and policy_arns parameters.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "IAM Groups",
              "value": "group1,group2"
            }
          },
          "iam_tags": {
            "type": "object",
            "description": "IAM tags to be set for any users created by this role. These must be presented as Key-Value pairs. This can be represented as a map or a list of equal sign delimited key pairs.",
            "format": "kvpairs",
            "x-vault-displayAttrs": {
              "name": "IAM Tags",
              "value": "[key1=value1, key2=value2]"
            }
          },
          "max_sts_ttl": {
            "type": "integer",
            "description": "Max allowed TTL for assumed_role and federation_token credential types",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Max STS TTL"
            }
          },
          "permissions_boundary_arn": {
            "type": "string",
            "description": "ARN of an IAM policy to attach as a permissions boundary on IAM user credentials; only valid when credential_type isiam_user",
            "x-vault-displayAttrs": {
              "name": "Permissions Boundary ARN"
            }
          },
          "policy": {
            "type": "string",
            "description": "Use policy_document instead.",
            "deprecated": true
          },
          "policy_arns": {
            "type": "array",
            "description": "ARNs of AWS policies. Behavior varies by credential_type. When credential_type is iam_user, then it will attach the specified policies to the generated IAM user. When credential_type is assumed_role or federation_token, the policies will be passed as the PolicyArns parameter, acting as a filter on permissions available.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Policy ARNs"
            }
          },
          "policy_document": {
            "type": "string",
            "description": "JSON-encoded IAM policy document. Behavior varies by credential_type. When credential_type is iam_user, then it will attach the contents of the policy_document to the IAM user generated. When credential_type is assumed_role or federation_token, this will be passed in as the Policy parameter to the AssumeRole or GetFederationToken API call, acting as a filter on permissions available."
          },
          "role_arns": {
            "type": "array",
            "description": "ARNs of AWS roles allowed to be assumed. Only valid when credential_type is assumed_role",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Role ARNs"
            }
          },
          "user_path": {
            "type": "string",
            "description": "Path for IAM User. Only valid when credential_type is iam_user",
            "default": "/",
            "x-vault-displayAttrs": {
              "name": "User Path",
              "value": "/"
            }
          }
        }
      },
      "StsRequest": {
        "type": "object",
        "properties": {
          "role_arn": {
            "type": "string",
            "description": "ARN of role to assume when credential_type is assumed_role"
          },
          "role_session_name": {
            "type": "string",
            "description": "Session name to use when assuming role. Max chars: 64"
          },
          "ttl": {
            "type": "integer",
            "description": "Lifetime of the returned credentials in seconds",
            "format": "seconds",
            "default": 3600
          }
        }
      }
    }
  }
}
