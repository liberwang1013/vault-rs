{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/config/ca": {
      "description": "Set the SSH private key used for signing certificates.",
      "get": {
        "summary": "Set the SSH private key used for signing certificates.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Set the SSH private key used for signing certificates.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigCaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Set the SSH private key used for signing certificates.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/config/zeroaddress": {
      "description": "Assign zero address as default CIDR block for select roles.",
      "get": {
        "summary": "Assign zero address as default CIDR block for select roles.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Assign zero address as default CIDR block for select roles.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigZeroaddressRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Assign zero address as default CIDR block for select roles.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/creds/{role}": {
      "description": "Creates a credential for establishing SSH connection with the remote host.",
      "parameters": [
        {
          "name": "role",
          "description": "[Required] Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Creates a credential for establishing SSH connection with the remote host.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/issue/{role}": {
      "description": "Request a certificate using a certain role with the provided details.",
      "parameters": [
        {
          "name": "role",
          "description": "The desired role with configuration for this request.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/lookup": {
      "description": "List all the roles associated with the given IP address.",
      "post": {
        "summary": "List all the roles associated with the given IP address.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/public_key": {
      "description": "Retrieve the public key.",
      "x-vault-unauthenticated": true,
      "get": {
        "summary": "Retrieve the public key.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles": {
      "description": "Manage the 'roles' that can be created with this backend.",
      "get": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles/{role}": {
      "description": "Manage the 'roles' that can be created with this backend.",
      "parameters": [
        {
          "name": "role",
          "description": "[Required for all types] Name of the role being created.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage the 'roles' that can be created with this backend.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/sign/{role}": {
      "description": "Request signing an SSH key using a certain role with the provided details.",
      "parameters": [
        {
          "name": "role",
          "description": "The desired role with configuration for this request.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Request signing an SSH key using a certain role with the provided details.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/tidy/dynamic-keys": {
      "description": "This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.",
      "delete": {
        "summary": "This endpoint removes the stored host keys used for the removed Dynamic Key feature, if present.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/verify": {
      "description": "Validate the OTP provided by Vault SSH Agent.",
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Validate the OTP provided by Vault SSH Agent.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigCaRequest": {
        "type": "object",
        "properties": {
          "generate_signing_key": {
            "type": "boolean",
            "description": "Generate SSH key pair internally rather than use the private_key and public_key fields.",
            "default": true
          },
          "key_bits": {
            "type": "integer",
            "description": "Specifies the desired key bits when generating variable-length keys (such as when key_type=\"ssh-rsa\") or which NIST P-curve to use when key_type=\"ec\" (256, 384, or 521).",
            "default": 0
          },
          "key_type": {
            "type": "string",
            "description": "Specifies the desired key type when generating; could be a OpenSSH key type identifier (ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521, or ssh-ed25519) or an algorithm (rsa, ec, ed25519).",
            "default": "ssh-rsa"
          },
          "private_key": {
            "type": "string",
            "description": "Private half of the SSH key that will be used to sign certificates."
          },
          "public_key": {
            "type": "string",
            "description": "Public half of the SSH key that will be used to sign certificates."
          }
        }
      },
      "ConfigZeroaddressRequest": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "description": "[Required] Comma separated list of role names which allows credentials to be requested for any IP address. CIDR blocks previously registered under these roles will be ignored.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CredsRequest": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "[Required] IP of the remote host"
          },
          "username": {
            "type": "string",
            "description": "[Optional] Username in remote host"
          }
        }
      },
      "IssueRequest": {
        "type": "object",
        "properties": {
          "cert_type": {
            "type": "string",
            "description": "Type of certificate to be created; either \"user\" or \"host\".",
            "default": "user"
          },
          "critical_options": {
            "type": "object",
            "description": "Critical options that the certificate should be signed for.",
            "format": "map"
          },
          "extensions": {
            "type": "object",
            "description": "Extensions that the certificate should be signed for.",
            "format": "map"
          },
          "key_bits": {
            "type": "integer",
            "description": "Specifies the number of bits to use for the generated keys.",
            "default": 0
          },
          "key_id": {
            "type": "string",
            "description": "Key id that the created certificate should have. If not specified, the display name of the token will be used."
          },
          "key_type": {
            "type": "string",
            "description": "Specifies the desired key type; must be `rsa`, `ed25519` or `ec`",
            "default": "rsa"
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the SSH certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be later than the role max TTL.",
            "format": "seconds"
          },
          "valid_principals": {
            "type": "string",
            "description": "Valid principals, either usernames or hostnames, that the certificate should be signed for."
          }
        }
      },
      "LookupRequest": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "[Required] IP address of remote host"
          }
        }
      },
      "RolesRequest": {
        "type": "object",
        "properties": {
          "algorithm_signer": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] When supplied, this value specifies a signing algorithm for the key. Possible values: ssh-rsa, rsa-sha2-256, rsa-sha2-512, default, or the empty string.",
            "enum": [
              "",
              "default",
              "ssh-rsa",
              "rsa-sha2-256",
              "rsa-sha2-512"
            ],
            "x-vault-displayAttrs": {
              "name": "Signing Algorithm"
            }
          },
          "allow_bare_domains": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, host certificates that are requested are allowed to use the base domains listed in \"allowed_domains\", e.g. \"example.com\". This is a separate option as in some cases this can be considered a security threat."
          },
          "allow_host_certificates": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, certificates are allowed to be signed for use as a 'host'.",
            "default": false
          },
          "allow_subdomains": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, host certificates that are requested are allowed to use subdomains of those listed in \"allowed_domains\"."
          },
          "allow_user_certificates": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, certificates are allowed to be signed for use as a 'user'.",
            "default": false
          },
          "allow_user_key_ids": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If true, users can override the key ID for a signed certificate with the \"key_id\" field. When false, the key ID will always be the token display name. The key ID is logged by the SSH server and can be useful for auditing.",
            "x-vault-displayAttrs": {
              "name": "Allow User Key IDs"
            }
          },
          "allowed_critical_options": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] A comma-separated list of critical options that certificates can have when signed. To allow any critical options, set this to an empty string."
          },
          "allowed_domains": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] If this option is not specified, client can request for a signed certificate for any valid host. If only certain domains are allowed, then this list enforces it."
          },
          "allowed_domains_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Allowed domains can be specified using identity template policies. Non-templated domains are also permitted.",
            "default": false
          },
          "allowed_extensions": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] A comma-separated list of extensions that certificates can have when signed. An empty list means that no extension overrides are allowed by an end-user; explicitly specify '*' to allow any extensions to be set."
          },
          "allowed_user_key_lengths": {
            "type": "object",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, allows the enforcement of key types and minimum key sizes to be signed.",
            "format": "map"
          },
          "allowed_users": {
            "type": "string",
            "description": "[Optional for all types] [Works differently for CA type] If this option is not specified, or is '*', client can request a credential for any valid user at the remote host, including the admin user. If only certain usernames are to be allowed, then this list enforces it. If this field is set, then credentials can only be created for default_user and usernames present in this list. Setting this option will enable all the users with access to this role to fetch credentials for all other usernames in this list. Use with caution. N.B.: with the CA type, an empty list means that no users are allowed; explicitly specify '*' to allow any user."
          },
          "allowed_users_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Allowed users can be specified using identity template policies. Non-templated users are also permitted.",
            "default": false
          },
          "cidr_list": {
            "type": "string",
            "description": "[Optional for OTP type] [Not applicable for CA type] Comma separated list of CIDR blocks for which the role is applicable for. CIDR blocks can belong to more than one role.",
            "x-vault-displayAttrs": {
              "name": "CIDR List"
            }
          },
          "default_critical_options": {
            "type": "object",
            "description": "[Not applicable for OTP type] [Optional for CA type] Critical options certificates should have if none are provided when signing. This field takes in key value pairs in JSON format. Note that these are not restricted by \"allowed_critical_options\". Defaults to none.",
            "format": "map"
          },
          "default_extensions": {
            "type": "object",
            "description": "[Not applicable for OTP type] [Optional for CA type] Extensions certificates should have if none are provided when signing. This field takes in key value pairs in JSON format. Note that these are not restricted by \"allowed_extensions\". Defaults to none.",
            "format": "map"
          },
          "default_extensions_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Default extension values can be specified using identity template policies. Non-templated extension values are also permitted.",
            "default": false
          },
          "default_user": {
            "type": "string",
            "description": "[Required for OTP type] [Optional for CA type] Default username for which a credential will be generated. When the endpoint 'creds/' is used without a username, this value will be used as default username.",
            "x-vault-displayAttrs": {
              "name": "Default Username"
            }
          },
          "default_user_template": {
            "type": "boolean",
            "description": "[Not applicable for OTP type] [Optional for CA type] If set, Default user can be specified using identity template policies. Non-templated users are also permitted.",
            "default": false
          },
          "exclude_cidr_list": {
            "type": "string",
            "description": "[Optional for OTP type] [Not applicable for CA type] Comma separated list of CIDR blocks. IP addresses belonging to these blocks are not accepted by the role. This is particularly useful when big CIDR blocks are being used by the role and certain parts of it needs to be kept out.",
            "x-vault-displayAttrs": {
              "name": "Exclude CIDR List"
            }
          },
          "key_id_format": {
            "type": "string",
            "description": "[Not applicable for OTP type] [Optional for CA type] When supplied, this value specifies a custom format for the key id of a signed certificate. The following variables are available for use: '{{token_display_name}}' - The display name of the token used to make the request. '{{role_name}}' - The name of the role signing the request. '{{public_key_hash}}' - A SHA256 checksum of the public key that is being signed.",
            "x-vault-displayAttrs": {
              "name": "Key ID Format"
            }
          },
          "key_type": {
            "type": "string",
            "description": "[Required for all types] Type of key used to login to hosts. It can be either 'otp' or 'ca'. 'otp' type requires agent to be installed in remote hosts.",
            "enum": [
              "otp",
              "ca"
            ],
            "x-vault-displayAttrs": {
              "value": "ca"
            }
          },
          "max_ttl": {
            "type": "integer",
            "description": "[Not applicable for OTP type] [Optional for CA type] The maximum allowed lease duration",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Max TTL"
            }
          },
          "not_before_duration": {
            "type": "integer",
            "description": "[Not applicable for OTP type] [Optional for CA type] The duration that the SSH certificate should be backdated by at issuance.",
            "format": "seconds",
            "default": 30,
            "x-vault-displayAttrs": {
              "name": "Not before duration",
              "value": 30
            }
          },
          "port": {
            "type": "integer",
            "description": "[Optional for OTP type] [Not applicable for CA type] Port number for SSH connection. Default is '22'. Port number does not play any role in creation of OTP. For 'otp' type, this is just a way to inform client about the port number to use. Port number will be returned to client by Vault server along with OTP.",
            "x-vault-displayAttrs": {
              "value": 22
            }
          },
          "ttl": {
            "type": "integer",
            "description": "[Not applicable for OTP type] [Optional for CA type] The lease duration if no specific lease duration is requested. The lease duration controls the expiration of certificates issued by this backend. Defaults to the value of max_ttl.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "TTL"
            }
          }
        }
      },
      "SignRequest": {
        "type": "object",
        "properties": {
          "cert_type": {
            "type": "string",
            "description": "Type of certificate to be created; either \"user\" or \"host\".",
            "default": "user"
          },
          "critical_options": {
            "type": "object",
            "description": "Critical options that the certificate should be signed for.",
            "format": "map"
          },
          "extensions": {
            "type": "object",
            "description": "Extensions that the certificate should be signed for.",
            "format": "map"
          },
          "key_id": {
            "type": "string",
            "description": "Key id that the created certificate should have. If not specified, the display name of the token will be used."
          },
          "public_key": {
            "type": "string",
            "description": "SSH public key that should be signed."
          },
          "ttl": {
            "type": "integer",
            "description": "The requested Time To Live for the SSH certificate; sets the expiration date. If not specified the role default, backend default, or system default TTL is used, in that order. Cannot be later than the role max TTL.",
            "format": "seconds"
          },
          "valid_principals": {
            "type": "string",
            "description": "Valid principals, either usernames or hostnames, that the certificate should be signed for."
          }
        }
      },
      "VerifyRequest": {
        "type": "object",
        "properties": {
          "otp": {
            "type": "string",
            "description": "[Required] One-Time-Key that needs to be validated"
          }
        }
      }
    }
  }
}
