{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/config": {
      "description": "Configure the access key and secret to use for RAM and STS calls.",
      "get": {
        "summary": "Configure the access key and secret to use for RAM and STS calls.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configure the access key and secret to use for RAM and STS calls.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Configure the access key and secret to use for RAM and STS calls.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/creds/{name}": {
      "description": "Generate an API key or STS credential using the given role's configuration.'",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Generate an API key or STS credential using the given role's configuration.'",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/role": {
      "description": "List the existing roles in this backend.",
      "get": {
        "summary": "List the existing roles in this backend.",
        "tags": [
          "secrets"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/role/{name}": {
      "description": "Read, write and reference policies and roles that API keys or STS credentials can be made for.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "summary": "Read, write and reference policies and roles that API keys or STS credentials can be made for.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Read, write and reference policies and roles that API keys or STS credentials can be made for.",
        "tags": [
          "secrets"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Read, write and reference policies and roles that API keys or STS credentials can be made for.",
        "tags": [
          "secrets"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigRequest": {
        "type": "object",
        "properties": {
          "access_key": {
            "type": "string",
            "description": "Access key with appropriate permissions."
          },
          "secret_key": {
            "type": "string",
            "description": "Secret key with appropriate permissions."
          }
        }
      },
      "RoleRequest": {
        "type": "object",
        "properties": {
          "inline_policies": {
            "type": "string",
            "description": "JSON of policies to be dynamically applied to users of this role."
          },
          "max_ttl": {
            "type": "integer",
            "description": "The maximum allowed lifetime of tokens issued using this role.",
            "format": "seconds"
          },
          "remote_policies": {
            "type": "array",
            "description": "The name and type of each remote policy to be applied. Example: \"name:AliyunRDSReadOnlyAccess,type:System\".",
            "items": {
              "type": "string"
            }
          },
          "role_arn": {
            "type": "string",
            "description": "ARN of the role to be assumed. If provided, inline_policies and remote_policies should be blank. At creation time, this role must have configured trusted actors, and the access key and secret that will be used to assume the role (in /config) must qualify as a trusted actor."
          },
          "ttl": {
            "type": "integer",
            "description": "Duration in seconds after which the issued token should expire. Defaults to 0, in which case the value will fallback to the system/mount defaults.",
            "format": "seconds"
          }
        }
      }
    }
  }
}
