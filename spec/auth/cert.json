{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/certs": {
      "description": "Manage trusted certificates used for authentication.",
      "x-vault-displayAttrs": {
        "navigation": true,
        "itemType": "Certificate"
      },
      "get": {
        "summary": "Manage trusted certificates used for authentication.",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/certs/{name}": {
      "description": "Manage trusted certificates used for authentication.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the certificate",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-displayAttrs": {
        "itemType": "Certificate",
        "action": "Create"
      },
      "get": {
        "summary": "Manage trusted certificates used for authentication.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage trusted certificates used for authentication.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage trusted certificates used for authentication.",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/config": {
      "get": {
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crls": {
      "description": "Manage Certificate Revocation Lists checked during authentication.",
      "get": {
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/crls/{name}": {
      "description": "Manage Certificate Revocation Lists checked during authentication.",
      "parameters": [
        {
          "name": "name",
          "description": "The name of the certificate",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Manage Certificate Revocation Lists checked during authentication.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Manage Certificate Revocation Lists checked during authentication.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrlsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Manage Certificate Revocation Lists checked during authentication.",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/login": {
      "x-vault-unauthenticated": true,
      "post": {
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CertsRequest": {
        "type": "object",
        "properties": {
          "allowed_common_names": {
            "type": "array",
            "description": "A comma-separated list of names. At least one must exist in the Common Name. Supports globbing.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "group": "Constraints"
            }
          },
          "allowed_dns_sans": {
            "type": "array",
            "description": "A comma-separated list of DNS names. At least one must exist in the SANs. Supports globbing.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Allowed DNS SANs",
              "group": "Constraints"
            }
          },
          "allowed_email_sans": {
            "type": "array",
            "description": "A comma-separated list of Email Addresses. At least one must exist in the SANs. Supports globbing.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Allowed Email SANs",
              "group": "Constraints"
            }
          },
          "allowed_metadata_extensions": {
            "type": "array",
            "description": "A comma-separated string or array of oid extensions. Upon successful authentication, these extensions will be added as metadata if they are present in the certificate. The metadata key will be the string consisting of the oid numbers separated by a dash (-) instead of a dot (.) to allow usage in ACL templates.",
            "items": {
              "type": "string"
            }
          },
          "allowed_names": {
            "type": "array",
            "description": "A comma-separated list of names. At least one must exist in either the Common Name or SANs. Supports globbing. This parameter is deprecated, please use allowed_common_names, allowed_dns_sans, allowed_email_sans, allowed_uri_sans.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "group": "Constraints"
            }
          },
          "allowed_organizational_units": {
            "type": "array",
            "description": "A comma-separated list of Organizational Units names. At least one must exist in the OU field.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "group": "Constraints"
            }
          },
          "allowed_uri_sans": {
            "type": "array",
            "description": "A comma-separated list of URIs. At least one must exist in the SANs. Supports globbing.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Allowed URI SANs",
              "group": "Constraints"
            }
          },
          "bound_cidrs": {
            "type": "array",
            "description": "Use \"token_bound_cidrs\" instead. If this and \"token_bound_cidrs\" are both specified, only \"token_bound_cidrs\" will be used.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "certificate": {
            "type": "string",
            "description": "The public certificate that should be trusted. Must be x509 PEM encoded.",
            "x-vault-displayAttrs": {
              "editType": "file"
            }
          },
          "display_name": {
            "type": "string",
            "description": "The display name to use for clients using this certificate."
          },
          "lease": {
            "type": "integer",
            "description": "Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.",
            "deprecated": true
          },
          "max_ttl": {
            "type": "integer",
            "description": "Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.",
            "format": "seconds",
            "deprecated": true
          },
          "ocsp_ca_certificates": {
            "type": "string",
            "description": "Any additional CA certificates needed to communicate with OCSP servers",
            "x-vault-displayAttrs": {
              "editType": "file"
            }
          },
          "ocsp_enabled": {
            "type": "boolean",
            "description": "Whether to attempt OCSP verification of certificates at login"
          },
          "ocsp_fail_open": {
            "type": "boolean",
            "description": "If set to true, if an OCSP revocation cannot be made successfully, login will proceed rather than failing. If false, failing to get an OCSP status fails the request.",
            "default": false
          },
          "ocsp_query_all_servers": {
            "type": "boolean",
            "description": "If set to true, rather than accepting the first successful OCSP response, query all servers and consider the certificate valid only if all servers agree.",
            "default": false
          },
          "ocsp_servers_override": {
            "type": "array",
            "description": "A comma-separated list of OCSP server addresses. If unset, the OCSP server is determined from the AuthorityInformationAccess extension on the certificate being inspected.",
            "items": {
              "type": "string"
            }
          },
          "period": {
            "type": "integer",
            "description": "Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.",
            "format": "seconds",
            "deprecated": true
          },
          "policies": {
            "type": "array",
            "description": "Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "required_extensions": {
            "type": "array",
            "description": "A comma-separated string or array of extensions formatted as \"oid:value\". Expects the extension value to be some type of ASN1 encoded string. All values much match. Supports globbing on \"value\".",
            "items": {
              "type": "string"
            }
          },
          "token_bound_cidrs": {
            "type": "array",
            "description": "Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Bound CIDRs",
              "group": "Tokens"
            }
          },
          "token_explicit_max_ttl": {
            "type": "integer",
            "description": "If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Explicit Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_max_ttl": {
            "type": "integer",
            "description": "The maximum lifetime of the generated token",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_no_default_policy": {
            "type": "boolean",
            "description": "If true, the 'default' policy will not automatically be added to generated tokens",
            "x-vault-displayAttrs": {
              "name": "Do Not Attach 'default' Policy To Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_num_uses": {
            "type": "integer",
            "description": "The maximum number of times a token may be used, a value of zero means unlimited",
            "x-vault-displayAttrs": {
              "name": "Maximum Uses of Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_period": {
            "type": "integer",
            "description": "If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Period",
              "group": "Tokens"
            }
          },
          "token_policies": {
            "type": "array",
            "description": "Comma-separated list of policies",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Policies",
              "group": "Tokens"
            }
          },
          "token_ttl": {
            "type": "integer",
            "description": "The initial ttl of the token to generate",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Initial TTL",
              "group": "Tokens"
            }
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to generate, service or batch",
            "default": "default-service",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Type",
              "group": "Tokens"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.",
            "format": "seconds",
            "deprecated": true
          }
        }
      },
      "ConfigRequest": {
        "type": "object",
        "properties": {
          "disable_binding": {
            "type": "boolean",
            "description": "If set, during renewal, skips the matching of presented client identity with the client identity used during login. Defaults to false.",
            "default": false
          },
          "enable_identity_alias_metadata": {
            "type": "boolean",
            "description": "If set, metadata of the certificate including the metadata corresponding to allowed_metadata_extensions will be stored in the alias. Defaults to false.",
            "default": false
          },
          "ocsp_cache_size": {
            "type": "integer",
            "description": "The size of the in memory OCSP response cache, shared by all configured certs",
            "default": 100
          }
        }
      },
      "CrlsRequest": {
        "type": "object",
        "properties": {
          "crl": {
            "type": "string",
            "description": "The public CRL that should be trusted to attest to certificates' validity statuses. May be DER or PEM encoded. Note: the expiration time is ignored; if the CRL is no longer valid, delete it using the same name as specified here."
          },
          "url": {
            "type": "string",
            "description": "The URL of a CRL distribution point. Only one of 'crl' or 'url' parameters should be specified."
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the certificate role to authenticate against."
          }
        }
      }
    }
  }
}
