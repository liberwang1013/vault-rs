{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/accessors/": {
      "description": "List token accessors, which can then be be used to iterate and discover their properties or revoke them. Because this can be used to cause a denial of service, this endpoint requires 'sudo' capability in addition to 'list'.",
      "x-vault-sudo": true,
      "get": {
        "summary": "List token accessors, which can then be\nbe used to iterate and discover their properties\nor revoke them. Because this can be used to\ncause a denial of service, this endpoint\nrequires 'sudo' capability in addition to\n'list'.",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/create": {
      "description": "The token create path is used to create new tokens.",
      "parameters": [
        {
          "name": "format",
          "description": "Return json formatted output",
          "in": "query",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "The token create path is used to create new tokens.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/create-orphan": {
      "description": "The token create path is used to create new orphan tokens.",
      "parameters": [
        {
          "name": "format",
          "description": "Return json formatted output",
          "in": "query",
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "The token create path is used to create new orphan tokens.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrphanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/create/{role_name}": {
      "description": "This token create path is used to create new tokens adhering to the given role.",
      "parameters": [
        {
          "name": "format",
          "description": "Return json formatted output",
          "in": "query",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "role_name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "post": {
        "summary": "This token create path is used to create new tokens adhering to the given role.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/lookup": {
      "description": "This endpoint will lookup a token and its properties.",
      "get": {
        "summary": "This endpoint will lookup a token and its properties.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "This endpoint will lookup a token and its properties.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/lookup-accessor": {
      "description": "This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.",
      "post": {
        "summary": "This endpoint will lookup a token associated with the given accessor and its properties. Response will not contain the token ID.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupAccessorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/lookup-self": {
      "description": "This endpoint will lookup a token and its properties.",
      "get": {
        "summary": "This endpoint will lookup a token and its properties.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "This endpoint will lookup a token and its properties.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupSelfRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/renew": {
      "description": "This endpoint will renew the given token and prevent expiration.",
      "post": {
        "summary": "This endpoint will renew the given token and prevent expiration.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/renew-accessor": {
      "description": "This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.",
      "post": {
        "summary": "This endpoint will renew a token associated with the given accessor and its properties. Response will not contain the token ID.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewAccessorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/renew-self": {
      "description": "This endpoint will renew the token used to call it and prevent expiration.",
      "post": {
        "summary": "This endpoint will renew the token used to call it and prevent expiration.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewSelfRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/revoke": {
      "description": "This endpoint will delete the given token and all of its child tokens.",
      "post": {
        "summary": "This endpoint will delete the given token and all of its child tokens.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/revoke-accessor": {
      "description": "This endpoint will delete the token associated with the accessor and all of its child tokens.",
      "post": {
        "summary": "This endpoint will delete the token associated with the accessor and all of its child tokens.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeAccessorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/revoke-orphan": {
      "description": "This endpoint will delete the token and orphan its child tokens.",
      "post": {
        "summary": "This endpoint will delete the token and orphan its child tokens.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeOrphanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/revoke-self": {
      "description": "This endpoint will delete the token used to call it and all of its child tokens.",
      "post": {
        "summary": "This endpoint will delete the token used to call it and all of its child tokens.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles": {
      "description": "This endpoint lists configured roles.",
      "get": {
        "summary": "This endpoint lists configured roles.",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/roles/{role_name}": {
      "parameters": [
        {
          "name": "role_name",
          "description": "Name of the role",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "get": {
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    },
    "/tidy": {
      "description": "This endpoint performs cleanup tasks that can be run if certain error conditions have occurred.",
      "post": {
        "summary": "This endpoint performs cleanup tasks that can be run if certain error\nconditions have occurred.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateOrphanRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Name to associate with this token"
          },
          "entity_alias": {
            "type": "string",
            "description": "Name of the entity alias to associate with this token"
          },
          "explicit_max_ttl": {
            "type": "string",
            "description": "Explicit Max TTL of this token"
          },
          "id": {
            "type": "string",
            "description": "Value for the token"
          },
          "metadata": {
            "type": "object",
            "description": "Arbitrary key=value metadata to associate with the token",
            "format": "map"
          },
          "no_default_policy": {
            "type": "boolean",
            "description": "Do not include default policy for this token"
          },
          "no_parent": {
            "type": "boolean",
            "description": "Create the token with no parent"
          },
          "num_uses": {
            "type": "integer",
            "description": "Max number of uses for this token"
          },
          "period": {
            "type": "string",
            "description": "Renew period"
          },
          "policies": {
            "type": "array",
            "description": "List of policies for the token",
            "items": {
              "type": "string"
            }
          },
          "renewable": {
            "type": "boolean",
            "description": "Allow token to be renewed past its initial TTL up to system/mount maximum TTL"
          },
          "role_name": {
            "type": "string",
            "description": "Name of the role"
          },
          "ttl": {
            "type": "string",
            "description": "Time to live for this token"
          },
          "type": {
            "type": "string",
            "description": "Token type"
          }
        }
      },
      "CreateRequest": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Name to associate with this token"
          },
          "entity_alias": {
            "type": "string",
            "description": "Name of the entity alias to associate with this token"
          },
          "explicit_max_ttl": {
            "type": "string",
            "description": "Explicit Max TTL of this token"
          },
          "id": {
            "type": "string",
            "description": "Value for the token"
          },
          "metadata": {
            "type": "object",
            "description": "Arbitrary key=value metadata to associate with the token",
            "format": "map"
          },
          "no_default_policy": {
            "type": "boolean",
            "description": "Do not include default policy for this token"
          },
          "no_parent": {
            "type": "boolean",
            "description": "Create the token with no parent"
          },
          "num_uses": {
            "type": "integer",
            "description": "Max number of uses for this token"
          },
          "period": {
            "type": "string",
            "description": "Renew period"
          },
          "policies": {
            "type": "array",
            "description": "List of policies for the token",
            "items": {
              "type": "string"
            }
          },
          "renewable": {
            "type": "boolean",
            "description": "Allow token to be renewed past its initial TTL up to system/mount maximum TTL"
          },
          "ttl": {
            "type": "string",
            "description": "Time to live for this token"
          },
          "type": {
            "type": "string",
            "description": "Token type"
          }
        }
      },
      "LookupAccessorRequest": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string",
            "description": "Accessor of the token to look up (request body)"
          }
        }
      },
      "LookupRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to lookup (POST request body)"
          }
        }
      },
      "LookupSelfRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to look up (unused, does not need to be set)"
          }
        }
      },
      "RenewAccessorRequest": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string",
            "description": "Accessor of the token to renew (request body)"
          },
          "increment": {
            "type": "integer",
            "description": "The desired increment in seconds to the token expiration",
            "format": "seconds",
            "default": 0
          }
        }
      },
      "RenewRequest": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "integer",
            "description": "The desired increment in seconds to the token expiration",
            "format": "seconds",
            "default": 0
          },
          "token": {
            "type": "string",
            "description": "Token to renew (request body)"
          }
        }
      },
      "RenewSelfRequest": {
        "type": "object",
        "properties": {
          "increment": {
            "type": "integer",
            "description": "The desired increment in seconds to the token expiration",
            "format": "seconds",
            "default": 0
          },
          "token": {
            "type": "string",
            "description": "Token to renew (unused, does not need to be set)"
          }
        }
      },
      "RevokeAccessorRequest": {
        "type": "object",
        "properties": {
          "accessor": {
            "type": "string",
            "description": "Accessor of the token (request body)"
          }
        }
      },
      "RevokeOrphanRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to revoke (request body)"
          }
        }
      },
      "RevokeRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token to revoke (request body)"
          }
        }
      },
      "RolesRequest": {
        "type": "object",
        "properties": {
          "allowed_entity_aliases": {
            "type": "array",
            "description": "String or JSON list of allowed entity aliases. If set, specifies the entity aliases which are allowed to be used during token generation. This field supports globbing.",
            "items": {
              "type": "string"
            }
          },
          "allowed_policies": {
            "type": "array",
            "description": "If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy names.",
            "items": {
              "type": "string"
            }
          },
          "allowed_policies_glob": {
            "type": "array",
            "description": "If set, tokens can be created with any subset of glob matched policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy name globs.",
            "items": {
              "type": "string"
            }
          },
          "bound_cidrs": {
            "type": "array",
            "description": "Use 'token_bound_cidrs' instead.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "disallowed_policies": {
            "type": "array",
            "description": "If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a comma-delimited string of policy names.",
            "items": {
              "type": "string"
            }
          },
          "disallowed_policies_glob": {
            "type": "array",
            "description": "If set, successful token creation via this role will require that no requested policies glob match any of policies in this list. The parameter is a comma-delimited string of policy name globs.",
            "items": {
              "type": "string"
            }
          },
          "explicit_max_ttl": {
            "type": "integer",
            "description": "Use 'token_explicit_max_ttl' instead.",
            "format": "seconds",
            "deprecated": true
          },
          "orphan": {
            "type": "boolean",
            "description": "If true, tokens created via this role will be orphan tokens (have no parent)"
          },
          "path_suffix": {
            "type": "string",
            "description": "If set, tokens created via this role will contain the given suffix as a part of their path. This can be used to assist use of the 'revoke-prefix' endpoint later on. The given suffix must match the regular expression.\\w[\\w-.]+\\w"
          },
          "period": {
            "type": "integer",
            "description": "Use 'token_period' instead.",
            "format": "seconds",
            "deprecated": true
          },
          "renewable": {
            "type": "boolean",
            "description": "Tokens created via this role will be renewable or not according to this value. Defaults to \"true\".",
            "default": true
          },
          "token_bound_cidrs": {
            "type": "array",
            "description": "Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Bound CIDRs",
              "group": "Tokens"
            }
          },
          "token_explicit_max_ttl": {
            "type": "integer",
            "description": "If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Explicit Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_no_default_policy": {
            "type": "boolean",
            "description": "If true, the 'default' policy will not automatically be added to generated tokens",
            "x-vault-displayAttrs": {
              "name": "Do Not Attach 'default' Policy To Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_num_uses": {
            "type": "integer",
            "description": "The maximum number of times a token may be used, a value of zero means unlimited",
            "x-vault-displayAttrs": {
              "name": "Maximum Uses of Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_period": {
            "type": "integer",
            "description": "If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Period",
              "group": "Tokens"
            }
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to generate, service or batch",
            "default": "default-service",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Type",
              "group": "Tokens"
            }
          }
        }
      }
    }
  }
}
