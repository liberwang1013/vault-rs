{
  "openapi": "3.0.2",
  "info": {
    "title": "HashiCorp Vault API",
    "description": "HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.",
    "version": "1.13.0",
    "license": {
      "name": "Mozilla Public License 2.0",
      "url": "https://www.mozilla.org/en-US/MPL/2.0"
    }
  },
  "paths": {
    "/config": {
      "description": "Configures the JWT Public Key and Kubernetes API information.",
      "get": {
        "summary": "Configures the JWT Public Key and Kubernetes API information.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Configures the JWT Public Key and Kubernetes API information.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/login": {
      "description": "Authenticates Kubernetes service accounts with Vault.",
      "x-vault-unauthenticated": true,
      "post": {
        "summary": "Authenticates Kubernetes service accounts with Vault.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/role": {
      "description": "Lists all the roles registered with the backend.",
      "x-vault-displayAttrs": {
        "navigation": true,
        "itemType": "Role"
      },
      "get": {
        "summary": "Lists all the roles registered with the backend.",
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "name": "list",
            "description": "Must be set to `true`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/role/{name}": {
      "description": "Register an role with the backend.",
      "parameters": [
        {
          "name": "name",
          "description": "Name of the role.",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "x-vault-createSupported": true,
      "x-vault-displayAttrs": {
        "itemType": "Role",
        "action": "Create"
      },
      "get": {
        "summary": "Register an role with the backend.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "summary": "Register an role with the backend.",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Register an role with the backend.",
        "tags": [
          "auth"
        ],
        "responses": {
          "204": {
            "description": "empty body"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigRequest": {
        "type": "object",
        "properties": {
          "disable_iss_validation": {
            "type": "boolean",
            "description": "Disable JWT issuer validation (Deprecated, will be removed in a future release)",
            "default": true,
            "deprecated": true,
            "x-vault-displayAttrs": {
              "name": "Disable JWT Issuer Validation"
            }
          },
          "disable_local_ca_jwt": {
            "type": "boolean",
            "description": "Disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod",
            "default": false,
            "x-vault-displayAttrs": {
              "name": "Disable use of local CA and service account JWT"
            }
          },
          "issuer": {
            "type": "string",
            "description": "Optional JWT issuer. If no issuer is specified, then this plugin will use kubernetes.io/serviceaccount as the default issuer. (Deprecated, will be removed in a future release)",
            "deprecated": true,
            "x-vault-displayAttrs": {
              "name": "JWT Issuer"
            }
          },
          "kubernetes_ca_cert": {
            "type": "string",
            "description": "PEM encoded CA cert for use by the TLS client used to talk with the API.",
            "x-vault-displayAttrs": {
              "name": "Kubernetes CA Certificate"
            }
          },
          "kubernetes_host": {
            "type": "string",
            "description": "Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server."
          },
          "pem_keys": {
            "type": "array",
            "description": "Optional list of PEM-formated public keys or certificates used to verify the signatures of kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Service account verification keys"
            }
          },
          "token_reviewer_jwt": {
            "type": "string",
            "description": "A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.",
            "x-vault-displayAttrs": {
              "name": "Token Reviewer JWT"
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string",
            "description": "A signed JWT for authenticating a service account. This field is required."
          },
          "role": {
            "type": "string",
            "description": "Name of the role against which the login is being attempted. This field is required"
          }
        }
      },
      "RoleRequest": {
        "type": "object",
        "properties": {
          "alias_name_source": {
            "type": "string",
            "description": "Source to use when deriving the Alias name. valid choices: \"serviceaccount_uid\" : <token.uid> e.g. 474b11b5-0f20-4f9d-8ca5-65715ab325e0 (most secure choice) \"serviceaccount_name\" : <namespace>/<serviceaccount> e.g. vault/vault-agent default: \"serviceaccount_uid\"",
            "default": "serviceaccount_uid"
          },
          "audience": {
            "type": "string",
            "description": "Optional Audience claim to verify in the jwt."
          },
          "bound_cidrs": {
            "type": "array",
            "description": "Use \"token_bound_cidrs\" instead. If this and \"token_bound_cidrs\" are both specified, only \"token_bound_cidrs\" will be used.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "bound_service_account_names": {
            "type": "array",
            "description": "List of service account names able to access this role. If set to \"*\" all names are allowed.",
            "items": {
              "type": "string"
            }
          },
          "bound_service_account_namespaces": {
            "type": "array",
            "description": "List of namespaces allowed to access this role. If set to \"*\" all namespaces are allowed.",
            "items": {
              "type": "string"
            }
          },
          "max_ttl": {
            "type": "integer",
            "description": "Use \"token_max_ttl\" instead. If this and \"token_max_ttl\" are both specified, only \"token_max_ttl\" will be used.",
            "format": "seconds",
            "deprecated": true
          },
          "num_uses": {
            "type": "integer",
            "description": "Use \"token_num_uses\" instead. If this and \"token_num_uses\" are both specified, only \"token_num_uses\" will be used.",
            "deprecated": true
          },
          "period": {
            "type": "integer",
            "description": "Use \"token_period\" instead. If this and \"token_period\" are both specified, only \"token_period\" will be used.",
            "format": "seconds",
            "deprecated": true
          },
          "policies": {
            "type": "array",
            "description": "Use \"token_policies\" instead. If this and \"token_policies\" are both specified, only \"token_policies\" will be used.",
            "items": {
              "type": "string"
            },
            "deprecated": true
          },
          "token_bound_cidrs": {
            "type": "array",
            "description": "Comma separated string or JSON list of CIDR blocks. If set, specifies the blocks of IP addresses which are allowed to use the generated token.",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Bound CIDRs",
              "group": "Tokens"
            }
          },
          "token_explicit_max_ttl": {
            "type": "integer",
            "description": "If set, tokens created via this role carry an explicit maximum TTL. During renewal, the current maximum TTL values of the role and the mount are not checked for changes, and any updates to these values will have no effect on the token being renewed.",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Explicit Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_max_ttl": {
            "type": "integer",
            "description": "The maximum lifetime of the generated token",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Maximum TTL",
              "group": "Tokens"
            }
          },
          "token_no_default_policy": {
            "type": "boolean",
            "description": "If true, the 'default' policy will not automatically be added to generated tokens",
            "x-vault-displayAttrs": {
              "name": "Do Not Attach 'default' Policy To Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_num_uses": {
            "type": "integer",
            "description": "The maximum number of times a token may be used, a value of zero means unlimited",
            "x-vault-displayAttrs": {
              "name": "Maximum Uses of Generated Tokens",
              "group": "Tokens"
            }
          },
          "token_period": {
            "type": "integer",
            "description": "If set, tokens created via this role will have no max lifetime; instead, their renewal period will be fixed to this value. This takes an integer number of seconds, or a string duration (e.g. \"24h\").",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Period",
              "group": "Tokens"
            }
          },
          "token_policies": {
            "type": "array",
            "description": "Comma-separated list of policies",
            "items": {
              "type": "string"
            },
            "x-vault-displayAttrs": {
              "name": "Generated Token's Policies",
              "group": "Tokens"
            }
          },
          "token_ttl": {
            "type": "integer",
            "description": "The initial ttl of the token to generate",
            "format": "seconds",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Initial TTL",
              "group": "Tokens"
            }
          },
          "token_type": {
            "type": "string",
            "description": "The type of token to generate, service or batch",
            "default": "default-service",
            "x-vault-displayAttrs": {
              "name": "Generated Token's Type",
              "group": "Tokens"
            }
          },
          "ttl": {
            "type": "integer",
            "description": "Use \"token_ttl\" instead. If this and \"token_ttl\" are both specified, only \"token_ttl\" will be used.",
            "format": "seconds",
            "deprecated": true
          }
        }
      }
    }
  }
}
